// <auto-generated />
using System;
using IA_AbansiBabayiSystemBlazor.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IA_AbansiBabayiSystemBlazor.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250617200412_CleanInit")]
    partial class CleanInit
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("IA_AbansiBabayiSystemBlazor.Data.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("MustChangePassword")
                        .HasColumnType("bit");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("IA_AbansiBabayiSystemBlazor.Data.Models.RegisteredTroopLeader", b =>
                {
                    b.Property<int>("LeaderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("leaderID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LeaderId"));

                    b.Property<int?>("AuthRoleId")
                        .HasColumnType("int")
                        .HasColumnName("authRoleID");

                    b.Property<string>("LeaderBeneficiary")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("leaderBeneficiary");

                    b.Property<DateOnly?>("LeaderBirthdate")
                        .HasColumnType("date")
                        .HasColumnName("leaderBirthdate");

                    b.Property<string>("LeaderEmail")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("leaderEmail");

                    b.Property<string>("LeaderFname")
                        .HasMaxLength(100)
                        .HasColumnType("nchar(100)")
                        .HasColumnName("leaderFname")
                        .IsFixedLength();

                    b.Property<string>("LeaderLname")
                        .HasMaxLength(100)
                        .HasColumnType("nchar(100)")
                        .HasColumnName("leaderLname")
                        .IsFixedLength();

                    b.Property<string>("LeaderMInitial")
                        .HasMaxLength(100)
                        .HasColumnType("nchar(100)")
                        .HasColumnName("leaderMInitial")
                        .IsFixedLength();

                    b.Property<string>("LeaderPosition")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("leaderPosition");

                    b.Property<string>("LeaderRegStatus")
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .HasColumnName("leaderRegStatus")
                        .IsFixedLength();

                    b.Property<string>("LeaderRole")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("leaderRole");

                    b.Property<string>("LeaderTorNT")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("leaderTorNT");

                    b.HasKey("LeaderId");

                    b.ToTable("REGISTERED_TROOP_LEADER", (string)null);
                });

            modelBuilder.Entity("IA_AbansiBabayiSystemBlazor.Data.Models.TroopLeaderAccount", b =>
                {
                    b.Property<int>("AccountsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("accountsID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountsId"));

                    b.Property<string>("Id")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("LeaderId")
                        .HasColumnType("int")
                        .HasColumnName("leaderID");

                    b.HasKey("AccountsId")
                        .HasName("PK__TROOP_LE__4A22408A41AD76EC");

                    b.HasIndex("Id");

                    b.HasIndex("LeaderId");

                    b.ToTable("TROOP_LEADER_ACCOUNTS", (string)null);
                });

            modelBuilder.Entity("IA_AbansiBabayiSystemBlazor.Data.Models.TroopLeaderRegistration", b =>
                {
                    b.Property<int>("LeaderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("leaderID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LeaderId"));

                    b.Property<int?>("CoLeaderToopNumber")
                        .HasColumnType("int")
                        .HasColumnName("coleaderTroopNo");

                    b.Property<string>("LeaderBeneficiary")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("leaderBeneficiary");

                    b.Property<DateOnly?>("LeaderBirthdate")
                        .IsRequired()
                        .HasColumnType("date")
                        .HasColumnName("leaderBirthdate");

                    b.Property<string>("LeaderEmail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("leaderEmail");

                    b.Property<string>("LeaderFname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nchar(100)")
                        .HasColumnName("leaderFname")
                        .IsFixedLength();

                    b.Property<string>("LeaderLname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nchar(100)")
                        .HasColumnName("leaderLname")
                        .IsFixedLength();

                    b.Property<string>("LeaderMInitial")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nchar(100)")
                        .HasColumnName("leaderMInitial")
                        .IsFixedLength();

                    b.Property<string>("LeaderPosition")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("leaderPosition");

                    b.Property<string>("LeaderRegStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .HasColumnName("leaderRegStatus")
                        .IsFixedLength();

                    b.Property<string>("LeaderRole")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("leaderRole")
                        .IsFixedLength();

                    b.Property<string>("LeaderTorNT")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("leaderTorNT");

                    b.HasKey("LeaderId");

                    b.ToTable("TROOP_LEADER_REGISTRATION", (string)null);
                });

            modelBuilder.Entity("IA_AbansiBabayiSystemBlazor.Data.Models.TroopMemberRegistration", b =>
                {
                    b.Property<string>("TroopMemBeneficiary")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("troopMemBeneficiary");

                    b.Property<DateOnly?>("TroopMemBirthdate")
                        .HasColumnType("date")
                        .HasColumnName("troopMemBirthdate");

                    b.Property<string>("TroopMemEmail")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("troopMemEmail");

                    b.Property<string>("TroopMemFname")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("troopMemFname");

                    b.Property<string>("TroopMemGradeOrYear")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("troopMemGradeOrYear");

                    b.Property<int?>("TroopMemId")
                        .HasColumnType("int")
                        .HasColumnName("troopMemID");

                    b.Property<string>("TroopMemLname")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("troopMemLname");

                    b.Property<string>("TroopMemMinitial")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("troopMemMInitial");

                    b.Property<string>("TroopMemRegStatus")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("troopMemRegStatus");

                    b.Property<string>("TroopMemRole")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("troopMemRole");

                    b.Property<int?>("TroopMemScoutNumber")
                        .HasColumnType("int")
                        .HasColumnName("troopMemScoutNumber");

                    b.ToTable("TROOP_MEMBER_REGISTRATION", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("IA_AbansiBabayiSystemBlazor.Data.Models.TroopLeaderAccount", b =>
                {
                    b.HasOne("IA_AbansiBabayiSystemBlazor.Data.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IA_AbansiBabayiSystemBlazor.Data.Models.RegisteredTroopLeader", "RegisteredTroopLeader")
                        .WithMany()
                        .HasForeignKey("LeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("RegisteredTroopLeader");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("IA_AbansiBabayiSystemBlazor.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("IA_AbansiBabayiSystemBlazor.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IA_AbansiBabayiSystemBlazor.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("IA_AbansiBabayiSystemBlazor.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
