@using Microsoft.AspNetCore.Authorization
@using IA_AbansiBabayiSystemBlazor.Data.Models
@using IA_AbansiBabayiSystemBlazor.Data
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore

@page "/managementPage"

@layout Layout.ThemedLayout

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager
@inject ApplicationDbContext UserInfoFromDB
@inject ILogger<ManagementPage> Logger

<div class="page-wrapper">
    <div class="page-content">
        <h2>Welcome back,</h2>
        <h1>@currentRole</h1>
        <!-- Add more content here -->
    </div>
</div>

@code{

    private ApplicationUser currentUser;
    private string currentRole;
    private string troopLeaderFname;
    private string errorMessage;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;

        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity?.IsAuthenticated ?? false)
            {
                var roleClaim = user.FindFirst(System.Security.Claims.ClaimTypes.Role);

                if (roleClaim != null)
                {
                    var role = roleClaim.Value;
                    Logger.LogInformation($"Role claim: {role}");

                    if(role == "Admin"){

                        currentRole = "ADMIN";

                    }
                    else if (role == "Troop Leader")
                    {
                        currentRole = "TROOP LEADER";
                    }

                }
                else
                {
                    currentRole = "No role assigned.";
                }
            }
            else
            {
                errorMessage = "User is not authenticated.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Something went wrong: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
}