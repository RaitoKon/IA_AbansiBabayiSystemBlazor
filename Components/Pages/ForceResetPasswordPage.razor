@using IA_AbansiBabayiSystemBlazor.Data.Models
@using Microsoft.AspNetCore.Identity
@using IA_AbansiBabayiSystemBlazor.Data
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Authorization
@using IA_AbansiBabayiSystemBlazor.Services

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject TableDataService<TroopLeader> TroopLeaderService
@inject TableDataService<TroopMember> TroopMemberService
@inject HttpClient HttpClient
@inject AuthenticatorService AuthenticatorService
@inject NavigationManager NavigationManager
@inject ILogger<ForceResetPasswordPage> Logger
@inject IJSRuntime JS

@page "/forceResetPasswordPage"
@attribute [Authorize(Roles = "Admin, Troop Leader, Scout")]

<!DOCTYPE html>

<div class="page-wrapper">
    @if (isLoading)
    {
        <div style="display: flex; justify-content: center; align-items: center; height: 100vh;">
            <p>Loading...</p>
        </div>
    }
    else
    {
        <img src="images/BG-Base1.png" alt="Background" class="hero-bg">
        <section class="registration-section">
            <div class="registration-placeholder">
                <div class="registration-placeholder-left">
                    <div class="registration-content">
                        <div style="display: flex; flex-direction: column; align-items: center;">
                            <MudIcon Icon="@Icons.Material.Filled.LockReset" Style="font-size: 6rem; color:#254A2A; margin-right: 1rem;" />
                            <h1>Reset Password</h1>
                            <p> In order to log-in, first time users are required to reset their password.</p>
                            <p>Hello there <b>@currentUserFname</b>! Please reset your password below.</p>
                        </div>
                        <div class="input-section">

                            @if (!string.IsNullOrEmpty(errorMessage))
                            {
                                <p style="color:red;">Error:<br /><b>@errorMessage</b></p>
                            }

                            <div class="custom-input-1">
                                <label>Enter Password</label>      
                                <div style="display:flex; align-items: center;">
                                <MudTextField @bind-Value="newPassword"
                                              Variant="Variant.Text"
                                              InputType="@(showPassword1? InputType.Text: InputType.Password)">

                                </MudTextField>
                                <MudIconButton Icon="@(showPassword1? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff)"
                                               Style="color:darkgray; justify-self: flex-end; padding:0;"
                                               OnClick="@(() => showPassword1 = !showPassword1)">
                                </MudIconButton>
                                </div>
                            </div>
                            <div class="custom-input-1">
                                <label>Confirm Password</label>
                                <div style="display:flex; align-items: center;">
                                    <MudTextField @bind-Value="confirmPassword"
                                                  Variant="Variant.Text"
                                                  InputType="@(showPassword2? InputType.Text: InputType.Password)">

                                    </MudTextField>
                                    <MudIconButton Icon="@(showPassword2? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff)"
                                                   Style="color:darkgray; justify-self: flex-end; padding:0;"
                                                   OnClick="@(() => showPassword2 = !showPassword2)">
                                    </MudIconButton>
                                </div>
                            </div>

                        </div>

                        <button type="submit" class="green-button" @onclick="ResetPassword" style="width:50%;">Submit</button>

                    </div>
                </div>
                <div class="registration-placeholder-right">
                </div>
            </div>
        </section>
    }
</div>

@code {
    private ApplicationUser currentUser;
    private string newPassword;
    private string confirmPassword;
    private string errorMessage;
    private string currentUserFname;
    private bool isLoading = true;
    private bool showPassword1 = false;
    private bool showPassword2 = false;

    protected override async Task OnInitializedAsync()
    {

        isLoading = true;

        try
        {
            // Use the service instead of writing the same code
            currentUser = await AuthenticatorService.GetCurrentUserAsync();

            if (currentUser == null)
            {
                NavigationManager.NavigateTo("/");
                return;
            }

            // Check roles using the service
            bool hasValidRole = await AuthenticatorService.UserHasRoleAsync("Admin", "Troop Leader", "Scout");

            if (!hasValidRole)
            {
                NavigationManager.NavigateTo("/");
                return;
            }

            // Check if password reset is needed
            if (!currentUser.MustChangePassword)
            {
                NavigationManager.NavigateTo("/userPage", true);
                return;
            }

            // LOAD THE DATA FIRST before querying
            await TroopLeaderService.LoadDataAsync();
            await TroopMemberService.LoadDataAsync();

            // Now query the loaded data
            var troopLeaderAccount = TroopLeaderService.Data?
                .FirstOrDefault(t => t.ApplicationUserId == currentUser.Id);

            var troopMemberAccount = TroopMemberService.Data?
                .FirstOrDefault(t => t.ApplicationUserId == currentUser.Id);

            if (troopLeaderAccount != null)
            {
                currentUserFname = troopLeaderAccount.LeaderFname;
            }
            else if (troopMemberAccount != null)
            {

                currentUserFname = troopMemberAccount.TroopMemFname;

            }
            else
            {
                NavigationManager.NavigateTo("/");
                errorMessage = "User profile not found in troop data, but you can still reset your password.";
            }

        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading user data: {ex.Message}";
            Logger.LogError(ex, "Error in ForceResetPasswordPage.OnInitializedAsync");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task ResetPassword()
    {
        errorMessage = "";

        // Basic validation
        if (string.IsNullOrWhiteSpace(newPassword) || string.IsNullOrWhiteSpace(confirmPassword))
        {
            errorMessage = "Please fill in both password fields.";
            return;
        }

        if (newPassword != confirmPassword)
        {
            errorMessage = "Passwords do not match.";
            return;
        }

        if (!IsPasswordValid(newPassword, out string validationMessage))
        {
            errorMessage = validationMessage;
            await Task.Delay(5000);

            validationMessage = string.Empty;
            return;
        }

        try
        {
            // Remove the old password (since they were using a temp one)
            var removeResult = await UserManager.RemovePasswordAsync(currentUser);
            if (!removeResult.Succeeded)
            {
                errorMessage = "Failed to remove old password: " +
                    string.Join("; ", removeResult.Errors.Select(e => e.Description));
                return;
            }

            // Add the new password
            var addResult = await UserManager.AddPasswordAsync(currentUser, newPassword);
            if (addResult.Succeeded)
            {
                // Update user flags
                currentUser.MustChangePassword = false;
                var updateResult = await UserManager.UpdateAsync(currentUser);

                if (updateResult.Succeeded)
                {
                    // Attempt to login with new credentials
                    var loginDto = new
                    {
                        Username = currentUser.UserName,
                        NewPassword = newPassword
                    };

                    var response = await HttpClient.PostAsJsonAsync("/auth/reset-login", loginDto);

                    if (response.IsSuccessStatusCode)
                    {
                        // Small delay to ensure login process completes
                        await Task.Delay(500);

                        // Redirect to user page
                        NavigationManager.NavigateTo("/userPage", true);
                    }
                    else
                    {
                        errorMessage = "Login failed after password reset. Please try logging in manually.";
                        Logger.LogWarning("Reset-login failed for user {UserId}", currentUser.Id);
                    }
                }
                else
                {
                    errorMessage = "Failed to update user profile: " +
                        string.Join("; ", updateResult.Errors.Select(e => e.Description));
                }
            }
            else
            {
                errorMessage = "Failed to set new password: " +
                    string.Join("; ", addResult.Errors.Select(e => e.Description));
                Logger.LogError("AddPassword failed for user {UserId}: {Errors}",
                    currentUser.Id, string.Join("; ", addResult.Errors));
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An unexpected error occurred during password reset.";
            Logger.LogError(ex, "ResetPassword failed for user {UserId}", currentUser?.Id);
        }
    }

    private bool IsPasswordValid(string password, out string validationMessage)
    {
        validationMessage = string.Empty;

        if (password.Length < 6)
        {
            validationMessage = "Password must be at least 6 characters long.";
            return false;
        }

        if (!password.Any(char.IsUpper))
        {
            validationMessage = "Password must contain at least one uppercase letter.";
            return false;
        }

        if (!password.Any(char.IsLower))
        {
            validationMessage = "Password must contain at least one lowercase letter.";
            return false;
        }

        if (!password.Any(char.IsDigit))
        {
            validationMessage = "Password must contain at least one digit.";
            return false;
        }

        if (password.Distinct().Count() < 3)
        {
            validationMessage = "Password must contain at least 3 unique characters.";
            return false;
        }

        return true;
    }
}