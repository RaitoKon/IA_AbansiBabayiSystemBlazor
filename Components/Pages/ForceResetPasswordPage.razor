@using IA_AbansiBabayiSystemBlazor.Data.Models
@using Microsoft.AspNetCore.Identity
@using IA_AbansiBabayiSystemBlazor.Data
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Authorization

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavigationManager
@inject SignInManager<ApplicationUser> SignInManager
@inject ApplicationDbContext UserInfoFromDB
@inject ILogger<ForceResetPasswordPage> Logger
@inject HttpClient HttpClient
@inject IJSRuntime JS

@page "/forceResetPasswordPage"

<!DOCTYPE html>


<div class="page-wrapper">
    <img src="images/BG-Base1.png" alt="Background" class="hero-bg">
    <section class="registration-section">
        <div class="registration-placeholder">
            <div class="registration-placeholder-left">
                <div class="registration-content">             
                    <div style="justify-items: center;">
                        <MudIcon Icon="@Icons.Material.Filled.LockReset" Style="font-size: 6rem; color:#254A2A" />
                        <h1>Reset Password</h1>
                        <p> In order to log-in, first time users are required to reset their password.</p>
                        <p>Hello there <b>@troopLeaderFname</b>! Please reset your password below.</p>
                    </div>
                    <div class="input-section">

                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                        <p style="color:red;">Error:<br/><b>@errorMessage</b></p>
                        }

                        <input type="text" placeholder="Enter Password" @bind="newPassword" required />
                        <input type="text" placeholder="Re-enter Password" @bind="confirmPassword" required />

                    </div>

                    <button type="submit" class="green-button" @onclick="ResetPassword" style="width:50%;">Submit</button>

                </div>
            </div>
            <div class="registration-placeholder-right">
            </div>
        </div>
    </section>
</div>

@code {
    private ApplicationUser currentUser;
    private string newPassword;
    private string confirmPassword;
    private string errorMessage;
    private string troopLeaderFname;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;

        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity?.IsAuthenticated ?? false)
            {
                var userId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
                currentUser = await UserManager.FindByIdAsync(userId);

                if (currentUser != null)
                {
                    // Fetch troop leader name from related data
                    var account = await UserInfoFromDB.RegisteredTroopLeaderAccounts
                        .FirstOrDefaultAsync(a => a.Id == userId);

                    if (account != null)
                    {
                        var troopInfo = await UserInfoFromDB.RegisteredTroopLeaders
                            .FirstOrDefaultAsync(l => l.LeaderId == account.LeaderId);

                        troopLeaderFname = troopInfo?.LeaderFname;
                    }
                }
            }
            else
            {
                errorMessage = "User is not authenticated.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Something went wrong: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task ResetPassword()
    {
        errorMessage = "";
        await Task.Delay(1000);

        if (string.IsNullOrWhiteSpace(newPassword) || newPassword != confirmPassword)
        {
            errorMessage = "Passwords do not match.";
            return;
        }

        if (!IsPasswordValid(newPassword, out string validationMessage))
        {
            errorMessage = validationMessage;
            return;
        }
        // Remove the old password (since they were using a temp one)
        var removeResult = await UserManager.RemovePasswordAsync(currentUser);
        if (!removeResult.Succeeded)
        {
            errorMessage = "Failed to remove old password.";
            return;
        }

        var addResult = await UserManager.AddPasswordAsync(currentUser, newPassword);
        if (addResult.Succeeded)
        {
            currentUser.MustChangePassword = false;
            await UserManager.UpdateAsync(currentUser);

            var dto = new
            {
                Username = currentUser.UserName,
                NewPassword = newPassword
            };

            var response = await HttpClient.PostAsJsonAsync("/auth/reset-login", dto);

            if (response.IsSuccessStatusCode)
            {
                await Task.Delay(500); // Let the cookie get set properly
                await JS.InvokeVoidAsync("eval", "window.location.href = '/userPage'");
            }
            else
            {
                errorMessage = "Login failed after password reset.";
            }
        }
        else
        {
            foreach (var error in addResult.Errors)
            {
                Console.WriteLine($"AddPassword error: {error.Code} - {error.Description}");
            }

            errorMessage = string.Join(" | ", addResult.Errors.Select(e => e.Description));
        }
    }

    private bool IsPasswordValid(string password, out string validationMessage)
    {
        validationMessage = string.Empty;

        if (password.Length < 6)
        {
            validationMessage = "Password must be at least 6 characters long.";
            return false;
        }

        if (!password.Any(char.IsUpper))
        {
            validationMessage = "Password must contain at least one uppercase letter.";
            return false;
        }

        if (!password.Any(char.IsLower))
        {
            validationMessage = "Password must contain at least one lowercase letter.";
            return false;
        }

        if (!password.Any(char.IsDigit))
        {
            validationMessage = "Password must contain at least one digit.";
            return false;
        }

        if (password.Distinct().Count() < 3)
        {
            validationMessage = "Password must contain at least 3 unique characters.";
            return false;
        }

        return true;
    }

}