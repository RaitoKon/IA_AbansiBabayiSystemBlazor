@using IA_AbansiBabayiSystemBlazor.Components.Themes
@using IA_AbansiBabayiSystemBlazor.Data.Models
@using Microsoft.AspNetCore.SignalR.Client
@using IA_AbansiBabayiSystemBlazor.Services

@page "/scoutEventsAndAnnouncementPage"

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject TableDataService<AddEventsOrAnnouncement> AddEventsOrAnnouncementService
@inject TableDataService<EventsOrAnnouncementsTarget> EventsOrAnnouncementsTargetService
@inject TableDataService<TroopMemberScoutLevel> TroopMemberScoutLevelService
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@inject ILogger<ScoutEventsAndAnnouncementPage> Logger

@inject AuthenticatorService AuthenticatorService
@attribute [Authorize(Roles = "Scout")]
@layout Layout.BlankLayout

<MudThemeProvider Theme="AbansiBabayiTheme.AbansiBabayiCustomTheme" />
<MudPopoverProvider />
<div class="page-wrapper">
    <img src="images/BG-Base1.png" alt="Background" class="hero-bg">
    <section>
        <nav class="navigation">
            <div class="nav-bg">
                <div class="nav-left">
                    <img src="images/GIRL SCOUT LOGO.png" alt="Logo" class="nav-logo">
                    <div class="nav-links">
                        <a href="/userPage" class="nav-link">HOME</a>
                        <a href="#" class="nav-link">BADGES</a>
                        <a href="#" class="nav-link">TROOP<br>LOCATOR</a>
                    </div>
                </div>
                <div class="nav-right">
                    <AuthorizeView Roles="Admin, Troop Leader">
                        <a href="/managementPage" class="nav-link">MANAGEMENT</a>
                    </AuthorizeView>
                    <AuthorizeView Roles="Scout">
                        <a href="/scoutEventsAndAnnouncementPage" class="nav-link">EVENTS AND <br /> ANNOUNCEMENTS</a>
                    </AuthorizeView>
                    <MudMenu>
                        <ActivatorContent>
                            <MudAvatar Class="double-border">
                                <MudImage Src="images/default-scout-avatar.jpg" />
                            </MudAvatar>
                        </ActivatorContent>
                        <ChildContent>
                            <MudMenuItem Href="/userProfilePage" Label="Profile" />
                            <MudDivider />
                            <MudMenuItem OnClick="LogoutAsync" Label="Logout" />
                        </ChildContent>
                    </MudMenu>
                </div>
            </div>
        </nav>
    </section>

    <section class="paper-margin">
        <MudTabs Elevation="0">

            <MudTabPanel Text="All">

                <MudPaper Class="pa-6 my-4" Elevation="2"
                          Style="   justify-items: center;
                                    width: 100%;
                                    padding-inline: 3rem;
                                    padding-block: 2rem;
                                    min-height: 40rem;
                                    border-radius: 0.5rem;
                                    border: 1px solid #FFF;
                                    background: linear-gradient(96deg, rgba(255, 255, 255, 1) -60.67%, rgba(255, 255, 255, 0.1) 50.46%);
                                    background-blend-mode: exclusion, normal;
                                    box-sizing: border-box;">

                    <MudText Typo="Typo.h5" Class="mb-4" Align="Align.Center">All Events & Announcements</MudText>
                    <MudDivider Style=" height: 0.2rem; background-color: white; width: 90%; align-self: center;" />

                    @if (AllItems.Any())
                    {
                        <MudGrid Style="width: 100%; margin: 0;">
                            @foreach (var e in AllItems)
                            {
                                <MudItem xs="12" Style="padding: 1rem;">
                                    <MudCard Style="width: 100%;">
                                        <div style="display:flex; height: 100%">
                                            <MudCardContent Style="display: flex; padding: 0.5rem; width: 100%;">
                                                @if (e.EventOrAnnouncementType == "Event") // Show date paper only for events
                                                {
                                                    <MudPaper Class="mud-theme-primary" Style="display: flex; flex-direction: column; height: 100%; width: 15rem; align-items: center; justify-content: center; text-align: center;">
                                                        @if (e.EventsOrAnnouncementsDateFrom.HasValue)
                                                        {
                                                            <div>
                                                                <p style="font-family: Lavish, sans-serif; font-size: 1.5rem;">@e.EventsOrAnnouncementsDateFrom.Value.ToString("MMMM")</p>
                                                                @if (@e.EventsOrAnnouncementsDateFrom.Value.ToString("dd") == @e.EventsOrAnnouncementsDateTo.Value.ToString("dd"))
                                                                {
                                                                    <p style="font-family: 'Bebas Neue', serif; font-size: 5rem; margin: -1rem;">@e.EventsOrAnnouncementsDateFrom.Value.ToString("dd").ToUpper()</p>
                                                                }
                                                                else
                                                                {
                                                                    <p style="font-family: 'Bebas Neue', serif; font-size: 5rem; margin: -1rem;">@e.EventsOrAnnouncementsDateFrom.Value.ToString("dd").ToUpper() - @e.EventsOrAnnouncementsDateTo?.ToString("dd").ToUpper()</p>
                                                                }
                                                            </div>
                                                        }
                                                        else
                                                        {
                                                            <p>No date set</p>
                                                        }
                                                    </MudPaper>
                                                }
                                                <div style="display: flex; flex-direction:column; justify-content: space-between; flex: 1;">
                                                    <MudItem>
                                                        <MudItem Class="pb-4">
                                                            <MudText Typo="Typo.h5" Style="margin-left: 1rem;">
                                                                @e.EventsOrAnnouncementsTitle
                                                            </MudText>
                                                            <MudText Typo="Typo.body2" Style="margin-left: 1rem;">
                                                                @e.EventsOrAnnouncementsDescription
                                                            </MudText>
                                                        </MudItem>
                                                        <MudDivider Style="margin-left: 0.5rem;" />
                                                        @if (e.EventOrAnnouncementType == "Event") // Show location and date range only for events
                                                        {
                                                            <MudItem Class="d-flex align-center ma-2 ml-3">
                                                                <MudIcon Class="mr-2" Icon="@Icons.Material.Filled.Place" Size="Size.Small" />
                                                                <MudText Typo="Typo.caption">
                                                                    @e.EventsOrAnnouncementsLocation
                                                                </MudText>
                                                            </MudItem>
                                                            <MudItem Class="d-flex align-center ma-2 ml-3">
                                                                <MudIcon Class="mr-2" Icon="@Icons.Material.Filled.DateRange" Size="Size.Small" />
                                                                <MudText Typo="Typo.caption">
                                                                    @if (e.EventsOrAnnouncementsDateFrom?.ToString("MMMM dd, yyyy") == e.EventsOrAnnouncementsDateTo?.ToString("MMMM dd, yyyy"))
                                                                    {
                                                                        @e.EventsOrAnnouncementsDateFrom?.ToString("MMMM dd, yyyy")
                                                                    }
                                                                    else
                                                                    {
                                                                        @($"{e.EventsOrAnnouncementsDateFrom?.ToString("MMMM dd, yyyy")} - {e.EventsOrAnnouncementsDateTo?.ToString("MMMM dd, yyyy")}")
                                                                    }
                                                                </MudText>
                                                            </MudItem>
                                                        }
                                                        <MudText Typo="Typo.body2" Style="margin-left: 1rem;"><strong>@(e.EventOrAnnouncementType == "Event" ? "Attendees" : "Target Group")</strong></MudText>

                                                        @if (EventsOrAnnouncementsTargetService.Data != null)
                                                        {
                                                            var attendees = EventsOrAnnouncementsTargetService.Data
                                                            .Where(a => a.EventsOrAnnouncementsId == e.EventsOrAnnouncementsId)
                                                            .OrderBy(a => GetScoutLevelOrder(a.TargetPeople)) // Custom sorting
                                                            .ToList();

                                                            if (attendees.Any())
                                                            {
                                                                <MudItem Class="d-flex flex-wrap ml-4 mt-1">
                                                                    @foreach (var attendee in attendees)
                                                                    {
                                                                        var chipStyle = GetChipStyle(attendee.TargetPeople);
                                                                        <MudChip Icon="@Icons.Material.Filled.Person" T="string" Size="Size.Small" Style="@chipStyle" Class="ma-1">
                                                                            @attendee.TargetPeople
                                                                        </MudChip>
                                                                    }
                                                                </MudItem>
                                                            }
                                                            else
                                                            {
                                                                <MudText Typo="Typo.caption" Class="ml-4">@(e.EventOrAnnouncementType == "Event" ? "Attendees Not Specified" : "Target Group Not Specified")</MudText>
                                                            }
                                                        }
                                                        else
                                                        {
                                                            <MudText Typo="Typo.caption" Class="ml-4">Loading attendees...</MudText>
                                                        }
                                                    </MudItem>
                                                    <MudCardActions>
                                                        <MudText Typo="Typo.caption" Class="ml-3">Date Posted: @e.DatePosted.Value.ToString("MMMM dd, yyyy")</MudText>
                                                    </MudCardActions>
                                                </div>

                                                @if (!string.IsNullOrEmpty(e.EventsOrAnnouncementsImagePath))
                                                {
                                                    <MudCardMedia Image="@e.EventsOrAnnouncementsImagePath" Style="height: 100%; width: 40%;" />
                                                }
                                            </MudCardContent>
                                        </div>
                                    </MudCard>
                                </MudItem>
                            }
                        </MudGrid>
                    }
                    else
                    {
                        <MudText Typo="Typo.body1" Class="text-center ma-4">
                            No events or announcements found.
                        </MudText>
                    }

                </MudPaper>
            </MudTabPanel>

            <MudTabPanel Text="Announcements">
                <MudPaper Class="pa-6 my-4" Elevation="2"
                          Style="  justify-items: center;
                                    width: 100%;
                                    padding-inline: 3rem;
                                    padding-block: 2rem;
                                    min-height: 40rem;
                                    border-radius: 0.5rem;
                                    border: 1px solid #FFF;
                                    background: linear-gradient(96deg, rgba(255, 255, 255, 1) -60.67%, rgba(255, 255, 255, 0.1) 50.46%);
                                    background-blend-mode: exclusion, normal;
                                    box-sizing: border-box;">

                    <MudText Typo="Typo.h5" Class="mb-4" Align="Align.Center">Announcements</MudText>
                    <MudDivider Style="height: 0.2rem; background-color: white; width: 90%; align-self: center;" />

                    @if (FilteredAnnouncements.Any())
                    {
                        <MudGrid Style="width: 100%; margin: 0;">
                            @foreach (var e in FilteredAnnouncements)
                            {
                                <MudItem xs="12" Style="padding: 1rem;">
                                    <MudCard Style="width: 100%;">
                                        <div style="display:flex; height: 100%">
                                            <MudCardContent Style="display: flex; padding: 0.5rem; width: 100%;">
                                                <div style="display: flex; flex-direction:column; justify-content: space-between; flex: 1;">
                                                    <MudItem>
                                                        <MudItem Class="pb-4">
                                                            <MudText Typo="Typo.h5" Style="margin-left: 1rem;">
                                                                @e.EventsOrAnnouncementsTitle
                                                            </MudText>
                                                            <MudText Typo="Typo.body2" Style="margin-left: 1rem;">
                                                                @e.EventsOrAnnouncementsDescription
                                                            </MudText>
                                                        </MudItem>
                                                        <MudDivider Style="margin-left: 0.5rem;" />
                                                        <MudText Typo="Typo.body2" Style="margin-left: 1rem;"><strong>Target Group:</strong></MudText>

                                                        @if (EventsOrAnnouncementsTargetService.Data != null)
                                                        {
                                                            var attendees = EventsOrAnnouncementsTargetService.Data
                                                            .Where(a => a.EventsOrAnnouncementsId == e.EventsOrAnnouncementsId)
                                                            .OrderBy(a => GetScoutLevelOrder(a.TargetPeople)) // Custom sorting
                                                            .ToList();

                                                            if (attendees.Any())
                                                            {
                                                                <MudItem Class="d-flex flex-wrap ml-4 mt-1">
                                                                    @foreach (var attendee in attendees)
                                                                    {
                                                                        var chipStyle = GetChipStyle(attendee.TargetPeople);
                                                                        <MudChip Icon="@Icons.Material.Filled.Person" T="string" Size="Size.Small" Style="@chipStyle" Class="ma-1">
                                                                            @attendee.TargetPeople
                                                                        </MudChip>
                                                                    }
                                                                </MudItem>
                                                            }
                                                            else
                                                            {
                                                                <MudText Typo="Typo.caption" Class="ml-4">Target Group Not Specified</MudText>
                                                            }
                                                        }
                                                        else
                                                        {
                                                            <MudText Typo="Typo.caption" Class="ml-4">Loading Target Group...</MudText>
                                                        }
                                                    </MudItem>
                                                    <MudCardActions>
                                                        <MudText Typo="Typo.caption" Class="ml-3">Date Posted: @e.DatePosted.Value.ToString("MMMM dd, yyyy")</MudText>
                                                    </MudCardActions>
                                                </div>

                                                @if (!string.IsNullOrEmpty(e.EventsOrAnnouncementsImagePath))
                                                {
                                                    <MudCardMedia Image="@e.EventsOrAnnouncementsImagePath" Style="height: 100%; width: 40%;" />
                                                }
                                            </MudCardContent>
                                        </div>
                                    </MudCard>
                                </MudItem>
                            }
                        </MudGrid>
                    }
                    else
                    {
                        <MudText Typo="Typo.body1" Class="text-center ma-4">
                            No announcements found.
                        </MudText>
                    }

                </MudPaper>
            </MudTabPanel>

            <MudTabPanel Text="Events">
                <MudPaper Class="pa-6 my-4" Elevation="2"
                          Style="    justify-items: center;
                                    width: 100%;
                                    padding-inline: 3rem;
                                    padding-block: 2rem;
                                    min-height: 40rem;
                                    border-radius: 0.5rem;
                                    border: 1px solid #FFF;
                                    background: linear-gradient(96deg, rgba(255, 255, 255, 1) -60.67%, rgba(255, 255, 255, 0.1) 50.46%);
                                    background-blend-mode: exclusion, normal;
                                    box-sizing: border-box;">

                    <MudText Typo="Typo.h5" Class="mb-4" Align="Align.Center">Events</MudText>
                    <MudDivider Style=" height: 0.2rem; background-color: white; width: 90%; align-self: center;" />

                    @if (FilteredEvents.Any())
                    {
                        <MudGrid Style="width: 100%; margin: 0;">
                            @foreach (var e in FilteredEvents)
                            {
                                <MudItem xs="12" Style="padding: 1rem;">
                                    <MudCard Style="width: 100%;">
                                        <div style="display:flex; height: 100%">
                                            <MudCardContent Style="display: flex; padding: 0.5rem; width: 100%;">
                                                <MudPaper Class="mud-theme-primary" Style="display: flex; flex-direction: column; height: 100%; width: 15rem; align-items: center; justify-content: center; text-align: center;">
                                                    @if (e.EventsOrAnnouncementsDateFrom.HasValue)
                                                    {
                                                        <div>
                                                            <p style="font-family: Lavish, sans-serif; font-size: 1.5rem;">@e.EventsOrAnnouncementsDateFrom.Value.ToString("MMMM")</p>
                                                            @if (@e.EventsOrAnnouncementsDateFrom.Value.ToString("dd") == @e.EventsOrAnnouncementsDateTo.Value.ToString("dd"))
                                                            {
                                                                <p style="font-family: 'Bebas Neue', serif; font-size: 5rem; margin: -1rem;">@e.EventsOrAnnouncementsDateFrom.Value.ToString("dd").ToUpper()</p>
                                                            }
                                                            else
                                                            {
                                                                <p style="font-family: 'Bebas Neue', serif; font-size: 5rem; margin: -1rem;">@e.EventsOrAnnouncementsDateFrom.Value.ToString("dd").ToUpper() - @e.EventsOrAnnouncementsDateTo?.ToString("dd").ToUpper()</p>
                                                            }
                                                        </div>
                                                    }
                                                    else
                                                    {
                                                        <p>No date set</p>
                                                    }
                                                </MudPaper>
                                                <div style="display: flex; flex-direction:column; justify-content: space-between; flex: 1;">
                                                    <MudItem>
                                                        <MudItem Class="pb-4">
                                                            <MudText Typo="Typo.h5" Style="margin-left: 1rem;">
                                                                @e.EventsOrAnnouncementsTitle
                                                            </MudText>
                                                            <MudText Typo="Typo.body2" Style="margin-left: 1rem;">
                                                                @e.EventsOrAnnouncementsDescription
                                                            </MudText>
                                                        </MudItem>
                                                        <MudDivider Style="margin-left: 0.5rem;" />
                                                        <MudItem Class="d-flex align-center ma-2 ml-3">
                                                            <MudIcon Class="mr-2" Icon="@Icons.Material.Filled.Place" Size="Size.Small" />
                                                            <MudText Typo="Typo.caption">
                                                                @e.EventsOrAnnouncementsLocation
                                                            </MudText>
                                                        </MudItem>
                                                        <MudItem Class="d-flex align-center ma-2 ml-3">
                                                            <MudIcon Class="mr-2" Icon="@Icons.Material.Filled.DateRange" Size="Size.Small" />
                                                            <MudText Typo="Typo.caption">
                                                                @if (e.EventsOrAnnouncementsDateFrom?.ToString("MMMM dd, yyyy") == e.EventsOrAnnouncementsDateTo?.ToString("MMMM dd, yyyy"))
                                                                {
                                                                    @e.EventsOrAnnouncementsDateFrom?.ToString("MMMM dd, yyyy")
                                                                }
                                                                else
                                                                {
                                                                    @($"{e.EventsOrAnnouncementsDateFrom?.ToString("MMMM dd, yyyy")} - {e.EventsOrAnnouncementsDateTo?.ToString("MMMM dd, yyyy")}")
                                                                }
                                                            </MudText>
                                                        </MudItem>                    

                                                            <MudText Typo="Typo.body2" Style="margin-left: 1rem;"><strong>Attendees</strong></MudText>                                                     
                                                       
                                                        @if (EventsOrAnnouncementsTargetService.Data != null)
                                                        {
                                                            var attendees = EventsOrAnnouncementsTargetService.Data
                                                            .Where(a => a.EventsOrAnnouncementsId == e.EventsOrAnnouncementsId)
                                                            .OrderBy(a => GetScoutLevelOrder(a.TargetPeople)) // Custom sorting
                                                            .ToList();

                                                            if (attendees.Any())
                                                            {
                                                                <MudItem Class="d-flex flex-wrap ml-4 mt-1">
                                                                    @foreach (var attendee in attendees)
                                                                    {
                                                                        var chipStyle = GetChipStyle(attendee.TargetPeople);
                                                                        <MudChip Icon="@Icons.Material.Filled.Person" T="string" Size="Size.Small" Style="@chipStyle" Class="ma-1">
                                                                            @attendee.TargetPeople
                                                                        </MudChip>
                                                                    }
                                                                </MudItem>
                                                            }
                                                            else
                                                            {
                                                                <MudText Typo="Typo.caption" Class="ml-4">Attendees Not Specified</MudText>
                                                            }
                                                        }
                                                        else
                                                        {
                                                            <MudText Typo="Typo.caption" Class="ml-4">Loading attendees...</MudText>
                                                        }
                                                    </MudItem>
                                                    <MudCardActions>
                                                        <MudText Typo="Typo.caption" Class="ml-3">Date Posted: @e.DatePosted.Value.ToString("MMMM dd, yyyy")</MudText>
                                                    </MudCardActions>
                                                </div>

                                                @if (!string.IsNullOrEmpty(e.EventsOrAnnouncementsImagePath))
                                                {
                                                    <MudCardMedia Image="@e.EventsOrAnnouncementsImagePath" Style="height: 100%; width: 40%;" />
                                                }
                                            </MudCardContent>
                                        </div>
                                    </MudCard>
                                </MudItem>
                            }
                        </MudGrid>
                    }
                    else
                    {
                        <MudText Typo="Typo.body1" Class="text-center ma-4">
                            No events found.
                        </MudText>
                    }

                </MudPaper>
            </MudTabPanel>
        </MudTabs>
    </section>
</div>

@code {
    private HubConnection? _hubConnection;
    private ApplicationUser currentUser;
    private int? expandedEventId = null;
    private int _index;
    private bool _completed;
    private string errorMessage;

    private List<AddEventsOrAnnouncement> FilteredEvents =>
       AddEventsOrAnnouncementService.Data?
           .Where(e => e.EventOrAnnouncementType == "Event")
           .OrderByDescending(e => e.DatePosted)
           .ToList() ?? new List<AddEventsOrAnnouncement>();

    private List<AddEventsOrAnnouncement> FilteredAnnouncements =>
        AddEventsOrAnnouncementService.Data?
            .Where(e => e.EventOrAnnouncementType == "Announcement")
            .OrderByDescending(e => e.DatePosted)
            .ToList() ?? new List<AddEventsOrAnnouncement>();

    private List<AddEventsOrAnnouncement> AllItems =>
        AddEventsOrAnnouncementService.Data?
            .OrderByDescending(e => e.DatePosted)
            .ToList() ?? new List<AddEventsOrAnnouncement>();

    protected override async Task OnInitializedAsync()
    {

        await AddEventsOrAnnouncementService.LoadDataAsync();
        await EventsOrAnnouncementsTargetService.LoadDataAsync();


        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/autoUpdateHub"))
            .WithAutomaticReconnect()
            .Build();

        _hubConnection.On<string>("ReceiveUpdate", async (tableName) =>
        {
            if (tableName == nameof(AddEventsOrAnnouncement) || tableName == nameof(EventsOrAnnouncementsTarget))
            {
                await AddEventsOrAnnouncementService.LoadDataAsync();
                await EventsOrAnnouncementsTargetService.LoadDataAsync();
                await InvokeAsync(StateHasChanged);
            }
        });

        await _hubConnection.StartAsync();
    
    }

    private int GetScoutLevelOrder(string scoutLevel)
    {
        return scoutLevel?.ToLower() switch
        {
            "twinklers" => 1,
            "star" => 2,
            "junior" => 3,
            "senior" => 4,
            "cadet" => 5,
            _ => 6
        };
    }

    private string GetChipStyle(string scoutLevelName)
    {
        return scoutLevelName?.ToLower() switch
        {
            "twinklers" => "background-color: #f467a4; color: #ffffff;", // Pink
            "star" => "background-color: #eed300; color: #ffffff;", // Yellow
            "junior" => "background-color: #fdbd23; color: #ffffff;", // Orange
            "senior" => "background-color: #ff8546; color: #ffffff;", // Coral
            "cadet" => "background-color: #a821e5; color: #ffffff;", // Purple
            _ => "background-color: #e0e0e0; color: #000000;" // Default gray
        };
    }

    private async Task LogoutAsync()
    {
        await JS.InvokeVoidAsync("eval", @"
        fetch('/auth/logout', {
            method: 'POST',
            credentials: 'include' // send auth cookie
        }).then(() => {
            window.location.href = '/landingPage';
        });
    ");
    }
}