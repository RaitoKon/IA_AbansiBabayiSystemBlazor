@using IA_AbansiBabayiSystemBlazor.Components.Themes
@using IA_AbansiBabayiSystemBlazor.Data.Models
@using Microsoft.AspNetCore.SignalR.Client

@page "/"
@page "/scoutEventsAndAnnouncementPage"

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject TableDataService<AddEvent> EventService
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

@layout Layout.BlankLayout

<MudThemeProvider Theme="AbansiBabayiTheme.AbansiBabayiCustomTheme" />
<MudPopoverProvider />
<div class="page-wrapper">
    <img src="images/BG-Base1.png" alt="Background" class="hero-bg">
    <section>
        <nav class="navigation">
            <div class="nav-bg">
                <div class="nav-left">
                    <img src="images/GIRL SCOUT LOGO.png" alt="Logo" class="nav-logo">
                    <div class="nav-links">
                        <a href="/userPage" class="nav-link">HOME</a>
                        <a href="#" class="nav-link">BADGES</a>
                        <a href="#" class="nav-link">TROOP<br>LOCATOR</a>
                    </div>
                </div>
                <div class="nav-right">
                    <AuthorizeView Roles="Admin, Troop Leader">
                        <a href="/managementPage" class="nav-link">MANAGEMENT</a>
                    </AuthorizeView>
                    <AuthorizeView Roles="Scout">
                        <a href="/scoutEventsAndAnnouncementPage" class="nav-link">EVENTS AND <br /> ANNOUNCEMENTS</a>
                    </AuthorizeView>
                    <MudMenu>
                        <ActivatorContent>
                            <MudAvatar Class="double-border">
                                <MudImage Src="images/default-scout-avatar.jpg" />
                            </MudAvatar>
                        </ActivatorContent>
                        <ChildContent>
                            <MudMenuItem Label="Profile" />
                            <MudDivider />
                            <MudMenuItem OnClick="LogoutAsync" Label="Logout" />
                        </ChildContent>
                    </MudMenu>
                </div>
            </div>
        </nav>
    </section>

    <section class="paper-margin">
        <MudTabs Elevation="0" ApplyEffectsToContainer="true">

            <MudTabPanel Text="ALL">
                <MudPaper Class="pa-6 my-4" Elevation="2"
                         Style="    justify-items: center;
                                    width: 100%;
                                    padding-inline: 3rem;
                                    padding-block: 2rem;
                                    min-height: 40rem;
                                    border-radius: 2rem;
                                    border: 1px solid #FFF;
                                    background: linear-gradient(96deg, rgba(255, 255, 255, 1) -60.67%, rgba(255, 255, 255, 0.1) 50.46%);
                                    background-blend-mode: exclusion, normal;
                                    box-sizing: border-box;">

                    <MudText Typo="Typo.h5" Class="mb-4" Align="Align.Center">Ongoing Events & Announcements</MudText>
                    <MudDivider Style=" height: 0.2rem; background-color: white; width: 90%; align-self: center;" />

                    @if (EventService.Data != null && EventService.Data.Any())
                    {
                        <MudGrid Style="width: 100%; margin: 0;">
                            @foreach (var e in EventService.Data.OrderBy(e => e.EventDate ?? DateTime.MaxValue))
                            {

                                <MudCard Style="margin: 2rem; height: 15rem; width: 100%; border-radius: 1rem;">
                                    <div style="display:flex; height: 100%">
                                        <MudCardContent Style="display: flex; padding: 0.5rem;">
                                            <MudPaper Class="mud-theme-primary" Style="display: flex; flex-direction: column; height: 100%; min-width: 15rem; align-items: center; justify-content: center; text-align: center; border-radius: 1rem;">
                                                @if (e.EventDate.HasValue)
                                                {
                                                    <div>
                                                        <p style="font-family: Lavish , sans-serif; font-size: 1rem; ">@e.EventDate.Value.ToString("MMMM")</p>

                                                        <p style="font-family: 'Bebas Neue', serif; font-size: 5rem; margin: -1rem;">@e.EventDate.Value.ToString("dd").ToUpper()</p>
                                                    </div>
                                                }
                                                else
                                                {
                                                    <p>No date set</p>
                                                }
                                            </MudPaper>
                                            <div style="display: flex; flex-direction:column; justify-content: space-between;">
                                                <div>
                                                    <MudText Style="margin-left: 1rem; font-size: 3rem;">
                                                        @e.EventTitle
                                                    </MudText>

                                                    <MudText Style="margin-left: 1rem; font-size: 1rem;">
                                                        @e.EventDescription
                                                    </MudText>
                                                    <br />
                                                    <MudDivider Style="margin-left: 0.5rem;" />
                                                    <br />
                                                    <div style="display: flex; margin-left: 1rem; justify-items: center;">
                                                        <MudIcon Icon="@Icons.Material.Filled.Place" Size="Size.Large" Class="mr-1" />
                                                        <MudText Style="margin-left: 0.5rem; margin-top: 0.3rem; font-size: 1rem;">
                                                            @e.EventLocation
                                                        </MudText>
                                                    </div>
                                                </div>
                                            </div>
                                        </MudCardContent>
                                        <MudCardMedia Image="@e.EventImagePath" Style="height: 100%; width: 35%;" />
                                    </div>
                                </MudCard>

                            }
                        </MudGrid>
                    }

                </MudPaper>
            </MudTabPanel>

            <MudTabPanel Text="Announcements">
                <MudPaper Class="pa-6 my-4" Elevation="2"
                          Style="  justify-items: center;
                                    width: 100%;
                                    padding-inline: 3rem;
                                    padding-block: 2rem;
                                    height: 40rem;
                                    border-radius: 2rem;
                                    border: 1px solid #FFF;
                                    background: linear-gradient(96deg, rgba(255, 255, 255, 1) -60.67%, rgba(255, 255, 255, 0.1) 50.46%);
                                    background-blend-mode: exclusion, normal;
                                    box-sizing: border-box;">

                    <MudText Typo="Typo.h5" Class="mb-4" Align="Align.Center">Announcements</MudText>
                    <MudDivider Style="height: 0.2rem; background-color: white; width: 90%; align-self: center;" />

                </MudPaper>
            </MudTabPanel>

            <MudTabPanel Text="Events">
                <MudPaper Class="pa-6 my-4" Elevation="2"
                          Style="    justify-items: center;
                                    width: 100%;
                                    padding-inline: 3rem;
                                    padding-block: 2rem;
                                    min-height: 40rem;
                                    border-radius: 2rem;
                                    border: 1px solid #FFF;
                                    background: linear-gradient(96deg, rgba(255, 255, 255, 1) -60.67%, rgba(255, 255, 255, 0.1) 50.46%);
                                    background-blend-mode: exclusion, normal;
                                    box-sizing: border-box;">

                    <MudText Typo="Typo.h5" Class="mb-4" Align="Align.Center">Ongoing Events & Announcements</MudText>
                    <MudDivider Style=" height: 0.2rem; background-color: white; width: 90%; align-self: center;" />

                    @if (EventService.Data != null && EventService.Data.Any())
                    {
                        <MudGrid Style="width: 100%; margin: 0;">
                            @foreach (var e in EventService.Data.OrderBy(e => e.EventDate ?? DateTime.MaxValue))
                            {

                                <MudCard Style="margin: 2rem; height: 15rem; width: 100%; border-radius: 1rem;">
                                    <div style="display:flex; height: 100%">
                                        <MudCardContent Style="display: flex; padding: 0.5rem;">
                                            <MudPaper Class="mud-theme-primary" Style="display: flex; flex-direction: column; height: 100%; min-width: 15rem; align-items: center; justify-content: center; text-align: center; border-radius: 1rem;">
                                                @if (e.EventDate.HasValue)
                                                {
                                                    <div>
                                                        <p style="font-family: Lavish , sans-serif; font-size: 1rem; ">@e.EventDate.Value.ToString("MMMM")</p>

                                                        <p style="font-family: 'Bebas Neue', serif; font-size: 5rem; margin: -1rem;">@e.EventDate.Value.ToString("dd").ToUpper()</p>
                                                    </div>
                                                }
                                                else
                                                {
                                                    <p>No date set</p>
                                                }
                                            </MudPaper>
                                            <div style="display: flex; flex-direction:column; justify-content: space-between;">
                                                <div>
                                                    <MudText Style="margin-left: 1rem; font-size: 3rem;">
                                                        @e.EventTitle
                                                    </MudText>

                                                    <MudText Style="margin-left: 1rem; font-size: 1rem;">
                                                        @e.EventDescription
                                                    </MudText>
                                                    <br />
                                                    <MudDivider Style="margin-left: 0.5rem;" />
                                                    <br />
                                                    <div style="display: flex; margin-left: 1rem; justify-items: center;">
                                                        <MudIcon Icon="@Icons.Material.Filled.Place" Size="Size.Large" Class="mr-1" />
                                                        <MudText Style="margin-left: 0.5rem; margin-top: 0.3rem; font-size: 1rem;">
                                                            @e.EventLocation
                                                        </MudText>
                                                    </div>
                                                </div>
                                            </div>
                                        </MudCardContent>
                                        <MudCardMedia Image="@e.EventImagePath" Style="height: 100%; width: 35%;" />
                                    </div>
                                </MudCard>

                            }
                        </MudGrid>
                    }

                </MudPaper>
            </MudTabPanel>
        </MudTabs>
    </section>
</div>

@code{
    private HubConnection? _hubConnection;
    private int? expandedEventId = null;
    private int _index;
    private bool _completed;

    protected override async Task OnInitializedAsync()
    {
        // Authorization
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        // Redirect to NotFound if role doesn't match (extra safety)
        if (!user.IsInRole("Admin") && !user.IsInRole("Troop Leader") && !user.IsInRole("Scout"))
        {
            NavigationManager.NavigateTo("/landingPage", forceLoad: true);
        }

        await EventService.LoadDataAsync();

        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/autoUpdateHub"))
            .WithAutomaticReconnect()
            .Build();

        _hubConnection.On<string>("ReceiveUpdate", async (tableName) =>
        {
            if (tableName == nameof(AddEvent))
            {
                await EventService.LoadDataAsync();
                await InvokeAsync(StateHasChanged);
            }
        });

        await _hubConnection.StartAsync();
    }

    private void EventRegisterButtonClicked()
    {
        
    }

    void ToggleExpanded(int eventId)
    {
        if (expandedEventId == eventId)
            expandedEventId = null; // collapse if same event clicked
        else
            expandedEventId = eventId; // expand this one
    }

    private async Task LogoutAsync()
    {
        await JS.InvokeVoidAsync("eval", @"
        fetch('/auth/logout', {
            method: 'POST',
            credentials: 'include' // send auth cookie
        }).then(() => {
            window.location.href = '/landingPage';
        });
    ");
    }
}