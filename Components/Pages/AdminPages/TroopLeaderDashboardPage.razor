@* @using System.Net.Http.Json
@using IA_AbansiBabayiSystemBlazor.Data
@using IA_AbansiBabayiSystemBlazor.Data.Models
@using Microsoft.EntityFrameworkCore
@using IA_AbansiBabayiSystemBlazor.Service
@using Microsoft.AspNetCore.Identity

@inject ApplicationDbContext GetTroopLeaderData
@inject NavigationManager NavigationManager
@inject TableDataService<RegisteredTroopLeader> TroopService
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IJSRuntime JS
@inject UserManager<ApplicationUser> UserManager

@page "/troopLeaderDashboardPage"
@layout Layout.ThemedLayout

<MudDialogProvider />
<div class="hero-content">

    <MudDataGrid T="RegisteredTroopLeader" 
        MultiSelection="true" 
        RowsPerPage="8" 
        ColumnResizeMode="ResizeMode.Column"
        Groupable="true"
        Striped="true" 
        Items="@FilteredElements" 
        SortMode="SortMode.Multiple"

    Filterable="true" QuickFilter="@_quickFilter" Hideable="true" SelectedItems="@GetSelectedItems()" SelectedItemsChanged="SelectedItemsChanged">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Troop Leader Dashboard</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
            AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <Columns>
            <SelectColumn T="RegisteredTroopLeader" />
            <PropertyColumn Property="x => x.LeaderId" Title="ID" Sortable="false" Filterable="false" />
            <TemplateColumn CellClass="justify-end">
                <CellTemplate>
                    <MudStack Row>
                        <MudButton Size="@Size.Small"
                        Variant="@Variant.Filled"
                        Color="Color.Error"
                        OnClick="@(async () => await DeleteSinglePersonAsync(context.Item))"
                        Disabled="@singleButtonDisabled">
                            Delete
                        </MudButton>
                    </MudStack>
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn Title="Full Name" Sortable="true">
                <CellTemplate Context="context">
                    <span style="white-space: nowrap">
                        @($"{context.Item.LeaderFname}{(string.IsNullOrWhiteSpace(context.Item.LeaderMInitial) ? "" : $" {context.Item.LeaderMInitial[0]}.")} {context.Item.LeaderLname}")
                    </span>
                </CellTemplate>
            </TemplateColumn>
            <PropertyColumn Property="x => x.LeaderPosition"
                            Title="Position"
                            Sortable="false"
                            Filterable="false"
                            Grouping="true"
                            GroupByOrder="_groupOrder"
                            GroupExpanded="_groupExpanded">

            </PropertyColumn>
            <PropertyColumn Property="x => x.LeaderTorNT" Title="Teaching or Non-Teaching" Sortable="false" Filterable="false" />
            <PropertyColumn Property="x => x.LeaderRegStatus" Title="Registration Status" Sortable="false" Filterable="false" />
            <PropertyColumn Property="x => x.LeaderEmail" Title="Email" />
        </Columns>
        <PagerContent>
            <MudDataGridPager T="RegisteredTroopLeader" Style="color: #25a129ff;" />
            <div class="pager-addOn">
                <MudButton Size="@Size.Small"
                Variant="@Variant.Filled"
                Color="Color.Error"
                OnClick="@(async () => await DeleteMultiplePersonsAsync())"
                Disabled="@multipleButtonDisabled">
                    Delete Selected
                </MudButton>
            </div>
        </PagerContent>
    </MudDataGrid>

    <MudMessageBox @ref="_mudMessageBox" Title="Confirm Deletion" CancelText="Cancel">
        <MessageContent>
            @if (_isSinglePersonClicked && _selectedPerson is not null)
            {
                <div>Are you sure you want to <b>delete</b> the request of <b>@_selectedPerson.LeaderFname @_selectedPerson.LeaderLname</b>?</div>
            }
            else if (_isMultiplePersonsClicked && _selectedItems.Any())
            {
                <div style="margin-bottom: 1rem;">
                    <ul style="margin-left: 1rem;">
                        @foreach (var person in _selectedItems)
                        {
                            <li>@person.LeaderFname @person.LeaderLname</li>
                        }
                    </ul>
                    <div>Are you sure you want to <b>delete</b> the selected registration requests?</div>
                </div>
            }
        </MessageContent>
        <YesButton>
            <MudButton Variant="Variant.Filled"
            Color="Color.Error"
            StartIcon="@Icons.Material.Filled.Delete"
            OnClick="async () => await ConfirmActionAsync()">
                Confirm Delete
            </MudButton>
        </YesButton>
    </MudMessageBox>

</div>
@code {
    private RegisteredTroopLeader? _selectedPerson;

    private bool multipleButtonDisabled = true;
    private bool singleButtonDisabled = false;
    private string _searchString = string.Empty;
    private bool isSubmitting = false;

    private IEnumerable<RegisteredTroopLeader> FilteredElements =>
    TroopService.Data ?? Enumerable.Empty<RegisteredTroopLeader>();

    private HashSet<RegisteredTroopLeader> _selectedItems = new();
    private HashSet<int> _selectedIds = new();
    private HashSet<RegisteredTroopLeader> GetSelectedItems()
    {
        if (TroopService.Data == null) return new();
        return TroopService.Data.Where(x => _selectedIds.Contains(x.LeaderId)).ToHashSet();
    }

    void SelectedItemsChanged(HashSet<RegisteredTroopLeader> selected)
    {
        _selectedItems = selected;
        _selectedIds = selected.Select(i => i.LeaderId).ToHashSet();
        multipleButtonDisabled = !_selectedItems.Any();
        singleButtonDisabled = _selectedItems.Any();
    }

    // Quick Filter function
    private Func<RegisteredTroopLeader, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        return (x.LeaderFname?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false)
            || (x.LeaderLname?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false)
            || (x.LeaderEmail?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false)
            || (x.LeaderPosition?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false);
    };

    protected override async Task OnInitializedAsync()
    {
        await TroopService.LoadDataAsync();
        TroopService.OnChanged += HandleDataChanged;

    }

    private void HandleDataChanged()
    {
        if (TroopService.Data != null)
        {
            _selectedItems = TroopService.Data
                .Where(x => _selectedIds.Contains(x.LeaderId))
                .ToHashSet();
        }

        InvokeAsync(StateHasChanged); // Refresh UI when data changes
    }

    public void Dispose()
    {
        // Clean up event subscription to prevent memory leaks
        TroopService.OnChanged -= HandleDataChanged;
    }

    public bool delete_switch { get; set; } = false;

    private async Task DeletePerson(RegisteredTroopLeader person)
    {

        var toDelete = await GetTroopLeaderData.TroopLeaders
       .FirstOrDefaultAsync(x => x.LeaderId == person.LeaderId);

        if (toDelete is not null)
        {
            GetTroopLeaderData.TroopLeaders.Remove(toDelete);
        }

        TroopService.Delete(person);

        await GetTroopLeaderData.SaveChangesAsync();

        Snackbar.Add($"{person.LeaderFname} {person.LeaderMInitial} {person.LeaderLname} has been removed successfully!", Severity.Success);
    }

    private async Task ShowConfirmationDialog(bool isSingle, bool isDelete)
    {

        string message;
        string title;

        if (isSingle && _selectedPerson != null)
        {
            title = isDelete ? "Confirm Deletion";
            message = $"Are you sure you want to delete the request of <b>{_selectedPerson.LeaderFname} {_selectedPerson.LeaderLname}</b>?";
        }
        else if (!isSingle && _selectedItems.Any())
        {
            title =  "Confirm Multiple Deletions";
            var names = string.Join("</li><li>", _selectedItems.Select(p => $"{p.LeaderFname} {p.LeaderLname}"));
            message = $"Are you sure you want to delete these registration requests?<ul><li>{names}</li></ul>";

        }
        else
        {
            return;
        }

        var parameters = new DialogParameters {
        { "Content", message },
        { "IsDelete", isDelete }  // Pass the delete mode to the dialog
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = DialogService.Show<ConfirmationDialog>(title, parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            if (isSingle)
            {
                if (isDelete) await DeletePerson(_selectedPerson);
                else await RegisterPerson(_selectedPerson);
            }
            else
            {
                foreach (var person in _selectedItems.ToList())
                {
                    if (isDelete) await DeletePerson(person);

                }
            }
        }

    }


    private async Task RegisterOrDeletePerson(TroopLeaderRegistration person)
    {
        _selectedPerson = person; // Store the selected person
        await ShowConfirmationDialog(isSingle: true, isDelete: delete_switch);
    }

    private async Task MultiplePersonClickedAsync()
    {
        if (_selectedItems == null || !_selectedItems.Any()) return;
        await ShowConfirmationDialog(isSingle: false, isDelete: false);
    }

    private async Task DeleteMultiplePersonsAsync()
    {
        if (_selectedItems == null || !_selectedItems.Any()) return;
        await ShowConfirmationDialog(isSingle: false, isDelete: true);
    }

    private bool _groupByPosition = true; // enable grouping on load
    private int _groupOrder = 0;              // group priority
    private bool _groupExpanded = true;       // whether it's expanded initially
} *@