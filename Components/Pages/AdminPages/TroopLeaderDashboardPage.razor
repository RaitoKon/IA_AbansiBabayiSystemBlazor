@using System.Net.Http.Json
@using IA_AbansiBabayiSystemBlazor.Data
@using IA_AbansiBabayiSystemBlazor.Data.Models
@using Microsoft.EntityFrameworkCore
@using IA_AbansiBabayiSystemBlazor.Service
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.SignalR.Client

@inject ApplicationDbContext GetTroopLeaderData
@inject NavigationManager NavigationManager
@inject TableDataService<RegisteredTroopLeader> RegisteredService
@inject TableDataService<TroopLeaderAccount> TroopLeaderAccountService
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IJSRuntime JS
@inject UserManager<ApplicationUser> UserManager

@page "/troopLeaderDashboardPage"
@layout Layout.ThemedLayout

<MudDialogProvider />
<div class="hero-content">

    <MudDataGrid T="RegisteredTroopLeader" 
        MultiSelection="true"
        RowsPerPage="8" 
        ColumnResizeMode="ResizeMode.Column"
        Groupable="true"
        Striped="true" 
        Items="@FilteredElements" 
        SortMode="SortMode.Multiple"
        Filterable="true" 
        QuickFilter="@_quickFilter" 
        Hideable="true" 
        SelectedItems="_selectedItems" 
        SelectedItemsChanged="SelectedItemsChanged">

        <ToolBarContent>
            <MudText Typo="Typo.h6">Troop Leader Dashboard</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
            AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <Columns>
            <SelectColumn T="RegisteredTroopLeader" />
            <PropertyColumn Property="x => x.LeaderId" Title="ID" Sortable="false" Filterable="false" />
            <TemplateColumn CellClass="justify-end">
                <CellTemplate>
                    <MudStack Row>
                        <MudButton Size="@Size.Small"
                        Variant="@Variant.Filled"
                        Color="Color.Error"
                        OnClick="@(() => SinglePersonClickedAsync(context.Item))"
                        Disabled="@singleButtonDisabled">
                            Delete
                        </MudButton>
                    </MudStack>
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn Title="Full Name" Sortable="true">
                <CellTemplate Context="context">
                    <span style="white-space: nowrap">
                        @($"{context.Item.LeaderFname}{(string.IsNullOrWhiteSpace(context.Item.LeaderMInitial) ? "" : $" {context.Item.LeaderMInitial[0]}.")} {context.Item.LeaderLname}")
                    </span>
                </CellTemplate>
            </TemplateColumn>
            <PropertyColumn Property="x => x.LeaderPosition"
                            Title="Position"
                            Sortable="false"
                            Filterable="false"
                            Grouping="true"
                            GroupByOrder="_groupOrder"
                            GroupExpanded="_groupExpanded">

            </PropertyColumn>
            <PropertyColumn Property="x => x.LeaderTorNT" Title="Teaching or Non-Teaching" Sortable="false" Filterable="false" />
            <PropertyColumn Property="x => x.LeaderRegStatus" Title="Registration Status" Sortable="false" Filterable="false" />
            <PropertyColumn Property="x => x.LeaderEmail" Title="Email" />
        </Columns>
        <PagerContent>
            <MudDataGridPager T="RegisteredTroopLeader" Style="color: #25a129ff;" />
            <div class="pager-addOn">
                <MudButton Size="@Size.Small"
                Variant="@Variant.Filled"
                Color="Color.Error"
                OnClick="MultiplePersonClickedAsync"
                Disabled="@multipleButtonDisabled">
                    Delete Selected
                </MudButton>
            </div>
        </PagerContent>
    </MudDataGrid>

</div>
@code {
    private RegisteredTroopLeader? _selectedPerson;
    private HubConnection? _hubConnection;

    private bool multipleButtonDisabled = true;
    private bool singleButtonDisabled = false;
    private string _searchString = string.Empty;
    private bool isSubmitting = false;
    public bool delete_switch { get; set; } = true;
    private bool _isDeleteMode => delete_switch;

    private IEnumerable<RegisteredTroopLeader> FilteredElements =>
    RegisteredService.Data ?? Enumerable.Empty<RegisteredTroopLeader>();

    private HashSet<RegisteredTroopLeader> _selectedItems = new();
    private HashSet<int> _selectedIds = new();
    private HashSet<RegisteredTroopLeader> GetSelectedItems()
    {
        if (RegisteredService.Data == null) return new();
        return RegisteredService.Data.Where(x => _selectedIds.Contains(x.LeaderId)).ToHashSet();
    }

    void SelectedItemsChanged(HashSet<RegisteredTroopLeader> selected)
    {
        _selectedItems = selected;
        _selectedIds = selected.Select(i => i.LeaderId).ToHashSet();

        multipleButtonDisabled = !_selectedItems.Any();
        singleButtonDisabled = _selectedItems.Any();
    }

    // Quick Filter function
    private Func<RegisteredTroopLeader, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        return (x.LeaderFname?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false)
            || (x.LeaderLname?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false)
            || (x.LeaderEmail?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false)
            || (x.LeaderPosition?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false);
    };

    protected override async Task OnInitializedAsync()
    {
        await RegisteredService.LoadDataAsync();
        RegisteredService.OnChanged += HandleDataChanged;

        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/autoUpdateHub"))
            .WithAutomaticReconnect()
            .Build();

        _hubConnection.On<string>("ReceiveUpdate", async (tableName) =>
        {
            if (tableName == nameof(RegisteredTroopLeader))
            {
                await RegisteredService.LoadDataAsync();  // This updates local cache and raises UI event
            }
        });

        await _hubConnection.StartAsync();

    }

    private void HandleDataChanged()
    {
        if (RegisteredService.Data != null && _selectedIds.Any())
        {
            _selectedItems = RegisteredService.Data
                .Where(x => _selectedIds.Contains(x.LeaderId))
                .ToHashSet();
        }
        _selectedItems = new HashSet<RegisteredTroopLeader>(_selectedItems);
        InvokeAsync(StateHasChanged); // Refresh UI when data changes
    }

    public async void Dispose()
    {
        RegisteredService.OnChanged -= HandleDataChanged;

        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }

    private async Task DeletePerson(RegisteredTroopLeader person)
    {
        if (person == null) return;

        try
        {

            var account = await GetTroopLeaderData.RegisteredTroopLeaderAccounts
            .FirstOrDefaultAsync(a => a.LeaderId == person.LeaderId);

            if (account != null)
            {
                var userRoles = await GetTroopLeaderData.UserRoles
                    .Where(ur => ur.UserId == account.Id)
                    .ToListAsync();

                GetTroopLeaderData.UserRoles.RemoveRange(userRoles);

                var identityUser = await GetTroopLeaderData.Users
                    .FirstOrDefaultAsync(u => u.Id == account.Id);

                if (identityUser != null)
                    GetTroopLeaderData.Users.Remove(identityUser);

                GetTroopLeaderData.RegisteredTroopLeaderAccounts.Remove(account);
            }

            GetTroopLeaderData.RegisteredTroopLeaders.Remove(person);

            await GetTroopLeaderData.SaveChangesAsync(); // commit all at once

            await RegisteredService.NotifyChangedAsync();

            Snackbar.Add(
                $"{person.LeaderFname} {person.LeaderMInitial} {person.LeaderLname} has been removed successfully!",
                Severity.Success
            );
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error deleting {person.LeaderFname} {person.LeaderLname}: {ex.Message}", Severity.Error);
        }
    }

    private async Task ShowConfirmationDialog(bool isSingle, bool isDelete)
    {

        string message;
        string title;

        if (isSingle && _selectedPerson != null)
        {
            title = "Confirm Deletion";
            message =  $"Are you sure you want to register <b>{_selectedPerson.LeaderFname} {_selectedPerson.LeaderLname}</b> as a Scout?";
        }
        else if (!isSingle && _selectedItems.Any())
        {
            title = "Confirm Multiple Deletions";
            var names = string.Join("</li><li>", _selectedItems.Select(p => $"{p.LeaderFname} {p.LeaderLname}"));
            message = $"Are you sure you want to delete these registration requests?<ul><li>{names}</li></ul>";
        }
        else
        {
            return;
        }

        var parameters = new DialogParameters {
        { "Content", message },
        { "IsDelete", isDelete }  // Pass the delete mode to the dialog
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = DialogService.Show<ConfirmationDialog>(title, parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            if (isSingle)
            {
                if (isDelete) await DeletePerson(_selectedPerson);
            }
            else
            {
                foreach (var person in _selectedItems.ToList())
                {
                    if (isDelete) await DeletePerson(person);
                }
            }
        }

    }

    private async Task SinglePersonClickedAsync(RegisteredTroopLeader person)
    {
        _selectedPerson = person; // Store the selected person
        await ShowConfirmationDialog(isSingle: true, isDelete: delete_switch);
    }

    private async Task MultiplePersonClickedAsync()
    {
        if (_selectedItems == null || !_selectedItems.Any()) return;
        await ShowConfirmationDialog(isSingle: false, isDelete: delete_switch);
    }


    private bool _groupByPosition = true; // enable grouping on load
    private int _groupOrder = 0;              // group priority
    private bool _groupExpanded = true;       // whether it's expanded initially
}