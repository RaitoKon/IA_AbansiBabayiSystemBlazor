@using System.Net.Http.Json
@using IA_AbansiBabayiSystemBlazor.Data
@using IA_AbansiBabayiSystemBlazor.Data.Models
@using Microsoft.EntityFrameworkCore
@using IA_AbansiBabayiSystemBlazor.Service
@using Microsoft.AspNetCore.Identity
@using IA_AbansiBabayiSystemBlazor.Components.Pages
@using Microsoft.AspNetCore.SignalR.Client

@inject NavigationManager NavigationManager
@inject TableDataService<TroopLeader> TroopLeaderService
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject UserManager<ApplicationUser> UserManager
@inject EmailService EmailService

@implements IDisposable

@page "/troopLeaderInactiveAccountsPage"
@layout Layout.ThemedLayout
@attribute [Authorize(Roles = "Admin")]

<MudDialogProvider />
<div class="hero-content">
    <MudTabs>
        <MudTabPanel Text="Rejected">
            <MudDataGrid T="TroopLeader"
                         MultiSelection="true"
                         RowsPerPage="8"
                         ColumnResizeMode="ResizeMode.Column"
                         Striped="true"
                         Items="@RejectedLeaders"
                         SortMode="SortMode.Multiple"
                         Filterable="true"
                         Groupable="true"
                         QuickFilter="@_quickFilter"
                         Hideable="true"
                         SelectedItems="@_selectedItems"
                         SelectedItemsChanged="SelectedItemsChanged">

                <ToolBarContent>
                    <MudText Typo="Typo.h6">Rejected Registrations</MudText>
                    <MudSpacer />
                    <MudTextField @bind-Value="_searchString"
                                  Placeholder="Search"
                                  Adornment="Adornment.Start"
                                  Immediate="true"
                                  AdornmentIcon="@Icons.Material.Filled.Search"
                                  IconSize="Size.Medium"
                                  Class="mt-0" />
                </ToolBarContent>

                <Columns>
                    <PropertyColumn Property="x => x.LeaderId" Title="ID" Sortable="false" Filterable="false" />

                    <TemplateColumn Title="Full Name" Sortable="true">
                        <CellTemplate Context="context">
                            <span style="white-space: nowrap">
                                @GetFullName(context.Item)
                            </span>
                        </CellTemplate>
                    </TemplateColumn>

                    <PropertyColumn Property="x => x.LeaderPosition.LeaderPositionName"
                                    Title="Position"
                                    Sortable="false"
                                    Filterable="false" />

                    <PropertyColumn Property="x => x.LeaderTorNt" Title="Teaching or Non-Teaching" Sortable="false" Filterable="false" />
                    <PropertyColumn Property="x => x.LeaderRegStatus" Title="Registration Status" Sortable="false" Filterable="false" />
                    <PropertyColumn Property="x => x.LeaderBeneficiary" Title="Beneficiary" Sortable="false" Filterable="false" Editable="true" />
                    <PropertyColumn Property="x => x.LeaderBirthdate" Title="Birth Date" Format="MMMM dd, yyyy" Sortable="false" Filterable="false" Editable="true" />
                    <PropertyColumn Property="x => x.LeaderEmail" Title="Email" Editable="true" />
                </Columns>

                <PagerContent>
                    <MudDataGridPager T="TroopLeader" Style="color: #25a129ff;" />
                </PagerContent>
            </MudDataGrid>
        </MudTabPanel>
        <MudTabPanel Text="Archived">
            <MudDataGrid T="TroopLeader"
                         MultiSelection="true"
                         RowsPerPage="8"
                         ColumnResizeMode="ResizeMode.Column"
                         Striped="true"
                         Items="@ArchivedLeaders"
                         SortMode="SortMode.Multiple"
                         Filterable="true"
                         Groupable="true"
                         QuickFilter="@_quickFilter"
                         Hideable="true"
                         SelectedItems="@_selectedItems"
                         SelectedItemsChanged="SelectedItemsChanged"
                         Dense="true">

                <ToolBarContent>
                    <MudText Typo="Typo.h6">Archived Accounts</MudText>
                    <MudSpacer />
                    <MudTextField @bind-Value="_searchString"
                                  Placeholder="Search"
                                  Adornment="Adornment.Start"
                                  Immediate="true"
                                  AdornmentIcon="@Icons.Material.Filled.Search"
                                  IconSize="Size.Medium"
                                  Class="mt-0" />
                </ToolBarContent>

                <Columns>
                    <PropertyColumn Property="x => x.LeaderId" Title="ID" Sortable="false" Filterable="false" />
                    <TemplateColumn Title="Full Name" Sortable="true">
                        <CellTemplate Context="context">
                            <span style="white-space: nowrap">
                                @GetFullName(context.Item)
                            </span>
                        </CellTemplate>
                    </TemplateColumn>

                    <PropertyColumn Property="x => x.LeaderPosition.LeaderPositionName"
                                    Title="Position"
                                    Sortable="false"
                                    Filterable="false" />
                    <PropertyColumn Property="x => x.LeaderTroopNo" Title="Troop Number" Sortable="false" Filterable="false" Editable="false" />
                    <PropertyColumn Property="x => x.LeaderTorNt" Title="Teaching or Non-Teaching" Sortable="false" Filterable="false" />
                    <PropertyColumn Property="x => x.LeaderRegStatus" Title="Registration Status" Sortable="false" Filterable="false" />
                    <PropertyColumn Property="x => x.LeaderBeneficiary" Title="Beneficiary" Sortable="false" Filterable="false" Editable="true" />
                    <PropertyColumn Property="x => x.LeaderBirthdate" Title="Birth Date" Format="MMMM dd, yyyy" Sortable="false" Filterable="false" Editable="true" />
                    <PropertyColumn Property="x => x.LeaderEmail" Title="Email" Editable="true" />
                    <PropertyColumn Property="x => x.LeaderRegisteredEmail" Title="Troop Number" Sortable="false" Filterable="false" Editable="false" />
                </Columns>

                <PagerContent>
                    <MudDataGridPager T="TroopLeader" Style="color: #25a129ff;" />
                </PagerContent>
            </MudDataGrid>
        </MudTabPanel>
    </MudTabs>
</div>

@code {
    private HubConnection? _hubConnection;
    private TroopLeader? _selectedPerson;
    private bool _disposed = false;

    // UI State
    private bool multipleButtonDisabled = true;
    private bool singleButtonDisabled = false;
    private bool reject_switch = false;
    private string _searchString = string.Empty;
    private HashSet<TroopLeader> _selectedItems = new();
    private HashSet<int> _selectedIds = new();

    // Data
    private IEnumerable<TroopLeader> RejectedLeaders =>
    (TroopLeaderService.Data ?? Enumerable.Empty<TroopLeader>())
        .Where(x => x.ApplicationUser != null && x.ApplicationUser.AccountStatusId == 3);

    private IEnumerable<TroopLeader> ArchivedLeaders =>
    (TroopLeaderService.Data ?? Enumerable.Empty<TroopLeader>())
        .Where(x => x.ApplicationUser != null && x.ApplicationUser.AccountStatusId == 4);


    // Quick Filter
    private Func<TroopLeader, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        return (x.LeaderFname?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false)
            || (x.LeaderLname?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false)
            || (x.LeaderEmail?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false);
    };

    // Helper Methods
    private string GetFullName(TroopLeader person)
    {
        var middleInitial = string.IsNullOrWhiteSpace(person.LeaderMname) ? "" : $" {person.LeaderMname[0]}.";
        return $"{person.LeaderFname}{middleInitial} {person.LeaderLname}";
    }

    private void SelectedItemsChanged(HashSet<TroopLeader> selected)
    {
        _selectedItems = selected;
        _selectedIds = selected.Select(x => x.LeaderId).ToHashSet();

        multipleButtonDisabled = !_selectedItems.Any();
        singleButtonDisabled = _selectedItems.Any();
    }

    // Lifecycle Methods
    protected override async Task OnInitializedAsync()
    {
        try
        {
            await TroopLeaderService.LoadDataAsync(q =>
                q.Include(t => t.ApplicationUser)
                 .Include(t => t.LeaderPosition)
            );

            _hubConnection = new HubConnectionBuilder()
                .WithUrl(NavigationManager.ToAbsoluteUri("/autoUpdateHub"))
                .WithAutomaticReconnect()
                .Build();

            _hubConnection.On<string>("ReceiveUpdate", async (tableName) =>
            {
                if (tableName == nameof(TroopLeader))
                {

                    await InvokeAsync(async () =>
                    {

                        var currentIds = _selectedItems.Select(x => x.LeaderId).ToHashSet();

                        await TroopLeaderService.LoadDataAsync(q =>
                            q.Include(t => t.ApplicationUser)
                             .Include(t => t.LeaderPosition)
                        );


                        if (TroopLeaderService.Data != null)
                        {
                            _selectedItems = TroopLeaderService.Data
                                .Where(x => currentIds.Contains(x.LeaderId))
                                .ToHashSet();

                            multipleButtonDisabled = !_selectedItems.Any();
                            singleButtonDisabled = _selectedItems.Any();
                        }

                        StateHasChanged();
                    });
                }
            });

            await _hubConnection.StartAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error initializing page: {ex.Message}", Severity.Error);
        }
    }

    // Action Methods
    private async Task SinglePersonClickedAsync(TroopLeader person)
    {
        _selectedPerson = person;
        await ShowConfirmationDialog(isSingle: true, isReject: reject_switch);
    }

    private async Task MultiplePersonClickedAsync()
    {
        if (_selectedItems == null || !_selectedItems.Any()) return;
        await ShowConfirmationDialog(isSingle: false, isReject: reject_switch);
    }

    private async Task ShowConfirmationDialog(bool isSingle, bool isReject)
    {
        try
        {
            var (title, message) = GetDialogContent(isSingle, isReject);

            var parameters = new DialogParameters
        {
            { "Content", message },
            { "IsReject", isReject },
            { "OnConfirmed", EventCallback.Factory.Create(this, () => ProcessAction(isSingle, isReject)) }
        };

            var options = new DialogOptions
            {
                CloseButton = true,
                MaxWidth = MaxWidth.ExtraSmall,
                FullWidth = true
            };

            // ✅ Await the dialog to prevent overlapping renders
            var dialog = DialogService.Show<ConfirmationDialog>(title, parameters, options);
            var result = await dialog.Result;

            if (!result.Canceled)
            {
                Snackbar.Add("Action completed successfully!", Severity.Success);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error showing dialog: {ex.Message}", Severity.Error);
        }
    }


    private (string title, string message) GetDialogContent(bool isSingle, bool isArchive)
    {
        if (isSingle && _selectedPerson != null)
        {
            var title = isArchive ? "Confirm Deletion" : "Confirm Registration";
            var message = isArchive
                ? $"Are you sure you want to reject the request of <b>{_selectedPerson.LeaderFname} {_selectedPerson.LeaderLname}</b>?"
                : $"Are you sure you want to register <b>{_selectedPerson.LeaderFname} {_selectedPerson.LeaderLname}</b> as a <b>{_selectedPerson.LeaderPosition?.LeaderPositionName}</b>?";

            return (title, message);
        }
        else if (!isSingle && _selectedItems.Any())
        {
            var title = isArchive ? "Confirm Multiple Deletions" : "Confirm Multiple Registrations";
            var names = string.Join("</li><li>", _selectedItems.Select(p => $"{p.LeaderFname} {p.LeaderLname}"));
            var message = isArchive
                ? $"Are you sure you want to reject these registration requests?<ul><li>{names}</li></ul>"
                : $"Are you sure you want to register these Troop Leaders?<ul><li>{names}</li></ul>";

            return (title, message);
        }

        return ("", "");
    }

    private async Task ProcessAction(bool isSingle, bool isArchive)
    {
        try
        {
            if (isSingle)
            {
                if (_selectedPerson != null)
                {
                    if (isArchive) await RejectPerson(_selectedPerson);
                    else await RegisterPerson(_selectedPerson);
                }
            }
            else
            {
                foreach (var person in _selectedItems.ToList())
                {
                    if (isArchive) await RejectPerson(person);
                    else await RegisterPerson(person);
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error processing action: {ex.Message}", Severity.Error);
        }
    }

    private async Task RegisterPerson(TroopLeader person)
    {
        // Add your registration logic here



        Snackbar.Add($"Registered {person.LeaderFname} {person.LeaderLname}", Severity.Success);
        await Task.CompletedTask;
    }

    private async Task RejectPerson(TroopLeader person)
    {
        try
        {
            ApplicationUser? user = null;

            // Try to find the user by IdentityUserId (preferred)
            if (!string.IsNullOrEmpty(person.ApplicationUserId))
            {
                user = await UserManager.FindByIdAsync(person.ApplicationUserId);
            }
            else
            {
                // Fallback to email if mapping not available
                user = await UserManager.FindByEmailAsync(person.LeaderEmail);
            }

            if (user != null)
            {
                user.AccountStatusId = 3; // Rejected
                await UserManager.UpdateAsync(user);

                Snackbar.Add($"Success: Request of {person.LeaderFname} {person.LeaderLname} was Rejected.", Severity.Success);
            }
            else
            {
                Snackbar.Add($"No ASP.NET Identity account found for {person.LeaderEmail}.", Severity.Warning);
            }

            await TroopLeaderService.Update(person);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error updating account status: {ex.Message}", Severity.Error);
        }
    }

    public void Dispose()
    {
        if (_disposed) return;
        _disposed = true;

        try
        {
            _hubConnection?.DisposeAsync();
        }
        catch
        {
            // Ignore disposal errors
        }
    }
}