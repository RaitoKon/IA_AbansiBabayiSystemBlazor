@using System.Net.Http.Json
@using IA_AbansiBabayiSystemBlazor.Data
@using IA_AbansiBabayiSystemBlazor.Data.Models
@using Microsoft.EntityFrameworkCore
@using IA_AbansiBabayiSystemBlazor.Service
@using IA_AbansiBabayiSystemBlazor.Services
@using Microsoft.AspNetCore.Identity
@using IA_AbansiBabayiSystemBlazor.Components.Pages
@using Microsoft.AspNetCore.SignalR.Client

@inject NavigationManager NavigationManager
@inject TableDataService<TroopLeader> TroopLeaderService
@inject TableDataService<TroopInformation> TroopInformationService
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject UserManager<ApplicationUser> UserManager
@inject EmailService EmailService
@inject IServiceProvider ServiceProvider

@inject AuthenticatorService AuthenticatorService

@implements IDisposable

@page "/troopLeaderRegistrationRequestsPage"
@layout Layout.ThemedLayout
@attribute [Authorize(Roles = "Admin")]

<MudDialogProvider />
<div class="hero-content">
    <MudDataGrid T="TroopLeader"
                 MultiSelection="true"
                 RowsPerPage="8"
                 ColumnResizeMode="ResizeMode.Column"
                 Striped="true"
                 Items="@FilteredElements"
                 SortMode="SortMode.Multiple"
                 Filterable="true"
                 Groupable="true"
                 QuickFilter="@_quickFilter"
                 Hideable="true"
                 SelectedItems="@_selectedItems"
                 SelectedItemsChanged="SelectedItemsChanged">

        <ToolBarContent>
            <MudText Typo="Typo.h6">Troop Leader Registration</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="_searchString"
                          Placeholder="Search"
                          Adornment="Adornment.Start"
                          Immediate="true"
                          AdornmentIcon="@Icons.Material.Filled.Search"
                          IconSize="Size.Medium"
                          Class="mt-0" />
        </ToolBarContent>

        <Columns>
            <PropertyColumn Property="x => x.LeaderId" Title="ID" Sortable="false" Filterable="false" />

            <TemplateColumn CellClass="justify-end">
                <CellTemplate>
                    <MudStack Row>
                        <MudButton Size="@Size.Small"
                                   Variant="@Variant.Filled"
                                   Color="@(reject_switch ? Color.Error : Color.Primary)"
                                   OnClick="@(async () =>
                                   {
                                      if (reject_switch == false)
                                      {
                                           if (await IsLeaderAssignedToTroop(context.Item.LeaderId))
                                           {
                                               SinglePersonClickedAsync(context.Item);
                                           }
                                           else
                                           {
                                               ShowTroopAssignmentDialog(context.Item);
                                           }
                                      }
                                      else{
                                            SinglePersonClickedAsync(context.Item);
                                      }
                                   })">
                            @(reject_switch ? "Reject" : "Register")
                        </MudButton>
                    </MudStack>
                </CellTemplate>
            </TemplateColumn>

            <TemplateColumn Title="Full Name" Sortable="true">
                <CellTemplate Context="context">
                    <span style="white-space: nowrap">
                        @GetFullName(context.Item)
                    </span>
                </CellTemplate>
            </TemplateColumn>

            <PropertyColumn Property="x => x.LeaderPosition.LeaderPositionName"
                            Title="Position"
                            Sortable="false"
                            Filterable="false" />

            <PropertyColumn Property="x => x.LeaderTorNt" Title="Teaching or Non-Teaching" Sortable="false" Filterable="false"/>
            <PropertyColumn Property="x => x.LeaderRegStatus" Title="Registration Status" Sortable="false" Filterable="false" />
            <PropertyColumn Property="x => x.LeaderBeneficiary" Title="Beneficiary" Sortable="false" Filterable="false" Editable="true" />
            <PropertyColumn Property="x => x.LeaderBirthdate" Title="Birth Date" Format="MMMM dd, yyyy" Sortable="false" Filterable="false" Editable="true" />
            <PropertyColumn Property="x => x.LeaderEmail" Title="Email" Editable="true" />
        </Columns>

        <PagerContent>
            <MudDataGridPager T="TroopLeader" Style="color: #25a129ff;" />
            <div class="pager-addOn">
                <MudSwitch @bind-Value="reject_switch"
                           Label="Reject"
                           LabelPlacement="Placement.Start"
                           Color="Color.Error" />
            </div>
        </PagerContent>
    </MudDataGrid>
</div>

@code {
    private HubConnection? _hubConnection;
    private TroopLeader? _selectedPerson;
    private bool _disposed = false;

    // UI State
    private bool reject_switch = false;
    private string _searchString = string.Empty;
    private HashSet<TroopLeader> _selectedItems = new();
    private HashSet<int> _selectedIds = new();

    private int _currentTroopLeaderId;
    private TroopInformation _currentTroop;

    // Data
    private IEnumerable<TroopLeader> FilteredElements => (TroopLeaderService.Data ?? Enumerable.Empty<TroopLeader>())
        .Where(x => x.ApplicationUser != null && x.ApplicationUser.AccountStatusId == 1);

    // Quick Filter
    private Func<TroopLeader, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        return (x.LeaderFname?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false)
            || (x.LeaderLname?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false)
            || (x.LeaderEmail?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false);
    };

    // Helper Methods
    private string GetFullName(TroopLeader person)
    {
        var middleInitial = string.IsNullOrWhiteSpace(person.LeaderMname) ? "" : $" {person.LeaderMname[0]}.";
        return $"{person.LeaderFname}{middleInitial} {person.LeaderLname}";
    }

    private void SelectedItemsChanged(HashSet<TroopLeader> selected)
    {
        _selectedItems = selected;
        _selectedIds = selected.Select(x => x.LeaderId).ToHashSet();
    }

    // Lifecycle Methods
    protected override async Task OnInitializedAsync()
    {
        try
        {
             await TroopLeaderService.LoadDataAsync(q =>
                            q.Include(t => t.ApplicationUser)
                             .Include(t => t.LeaderPosition)
             );
            // Get the current user using your AuthenticatorService
            var currentUser = await AuthenticatorService.GetCurrentUserAsync();
        
            if (currentUser != null)
            {
                // Load troop leaders to find the current user's troop leader record
                await TroopLeaderService.LoadDataAsync(q =>
                    q.Include(t => t.ApplicationUser)
                     .Include(t => t.LeaderPosition)
                );

                // Find the troop leader record for this user
                var currentTroopLeader = TroopLeaderService.Data?
                    .FirstOrDefault(t => t.ApplicationUser?.Id == currentUser.Id);
                
                _currentTroopLeaderId = currentTroopLeader?.LeaderId ?? 0;

                // Also store the current troop information
                await TroopInformationService.LoadDataAsync();
                _currentTroop = TroopInformationService.Data?
                    .FirstOrDefault(t => t.TroopLeaderId == _currentTroopLeaderId);
            }

            // Set up SignalR hub connection
            _hubConnection = new HubConnectionBuilder()
                .WithUrl(NavigationManager.ToAbsoluteUri("/autoUpdateHub"))
                .WithAutomaticReconnect()
                .Build();

            _hubConnection.On<string>("ReceiveUpdate", async (tableName) =>
            {
                if (tableName == nameof(TroopLeader))
                {
                    await InvokeAsync(async () =>
                    {
                        var currentIds = _selectedItems.Select(x => x.LeaderId).ToHashSet();
                        await TroopLeaderService.LoadDataAsync(q =>
                            q.Include(t => t.ApplicationUser)
                             .Include(t => t.LeaderPosition)
                        );

                        if (TroopLeaderService.Data != null)
                        {
                            _selectedItems = TroopLeaderService.Data
                                .Where(x => currentIds.Contains(x.LeaderId))
                                .ToHashSet();
                        }
                        StateHasChanged();
                    });
                }
            });

            await _hubConnection.StartAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error initializing page: {ex.Message}", Severity.Error);
        }
    }

    // Action Methods
    private async Task SinglePersonClickedAsync(TroopLeader person)
    {
        _selectedPerson = person;
        await ShowConfirmationDialog(isSingle: true, isReject: reject_switch);
    }

    private async Task ShowConfirmationDialog(bool isSingle, bool isReject)
    {
        try
        {
            var (title, message) = GetDialogContent(isSingle, isReject);

            var parameters = new DialogParameters
        {
            { "Content", message },
            { "IsReject", isReject },
            { "OnConfirmed", EventCallback.Factory.Create(this, () => ProcessAction(isSingle, isReject)) }
        };

            var options = new DialogOptions
            {
                CloseButton = true,
                MaxWidth = MaxWidth.ExtraSmall,
                FullWidth = true
            };

            // ✅ Await the dialog to prevent overlapping renders
            var dialog = DialogService.Show<ConfirmationDialog>(title, parameters, options);
            var result = await dialog.Result;

        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error showing dialog: {ex.Message}", Severity.Error);
        }
    }


    private (string title, string message) GetDialogContent(bool isSingle, bool isArchive)
    {
        var title = isArchive ? "Confirm Deletion" : "Confirm Registration";
        var message = isArchive
                ? $"Are you sure you want to reject the request of <b>{_selectedPerson.LeaderFname} {_selectedPerson.LeaderLname}</b>?"
                : $"Are you sure you want to register <b>{_selectedPerson.LeaderFname} {_selectedPerson.LeaderLname}</b> as a <b>{_selectedPerson.LeaderPosition?.LeaderPositionName}</b>?";

        return (title, message);

        return ("", "");
    }

    private async Task ProcessAction(bool isSingle, bool isArchive)
    {
        try
        {
            if (isSingle)
            {
                if (_selectedPerson != null)
                {
                    if (isArchive) await RejectPerson(_selectedPerson);
                    else await RegisterPerson(_selectedPerson);
                }
            }
            else
            {
                foreach (var person in _selectedItems.ToList())
                {
                    if (isArchive) await RejectPerson(person);
                    else await RegisterPerson(person);
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error processing action: {ex.Message}", Severity.Error);
        }
    }

    private async Task RegisterPerson(TroopLeader person)
    {
        try
        {
            string Sanitize(string input) => new string(input.Where(char.IsLetterOrDigit).ToArray());

            var first = Sanitize(person.LeaderFname);
            var last = Sanitize(person.LeaderLname);
            var year = DateTime.Now.ToString("yy");
            var userNewEmail = $"{first}.{last}-{year}@igsc.com.ph".ToLower();
            var tempPassword = GenerateTemporaryPassword.GenerateTempPassword();

            // Use a fresh scope to avoid all tracking issues
            using (var scope = ServiceProvider.CreateScope())
            {
                var userManager = scope.ServiceProvider.GetRequiredService<UserManager<ApplicationUser>>();
                var dbContext = scope.ServiceProvider.GetRequiredService<ApplicationDbContext>();

                // Get the troop leader with a fresh context
                var troopLeader = await dbContext.TroopLeaders
                    .Include(t => t.ApplicationUser)
                    .FirstOrDefaultAsync(t => t.LeaderId == person.LeaderId);

                if (troopLeader?.ApplicationUser != null)
                {
                    // Update user
                    var user = troopLeader.ApplicationUser;
                    user.AccountStatusId = 2; // Approved
                    user.MustChangePassword = true;
                    user.PasswordHash = userManager.PasswordHasher.HashPassword(user, tempPassword);

                    var updateResult = await userManager.UpdateAsync(user);
                    if (!updateResult.Succeeded)
                    {
                        Snackbar.Add($"Error updating user: {string.Join(", ", updateResult.Errors.Select(e => e.Description))}", Severity.Error);
                        return;
                    }

                    // Update TroopLeader email
                    troopLeader.LeaderRegisteredEmail = userNewEmail;
                    await dbContext.SaveChangesAsync();

                    // Assign role
                    var existingRoles = await userManager.GetRolesAsync(user);
                    if (existingRoles.Any())
                    {
                        await userManager.RemoveFromRolesAsync(user, existingRoles);
                    }

                    await userManager.AddToRoleAsync(user, troopLeader.UserRole);

                    await EmailService.SendRegisteredConfirmationEmailAsync(userNewEmail, troopLeader.LeaderEmail, troopLeader.LeaderFname, tempPassword);

                    await TroopLeaderService.NotifyChangedAsync();

                    Snackbar.Add($"Success:{troopLeader.LeaderFname} {troopLeader.LeaderLname} was accepted and assigned to respective troop.", Severity.Success);
                }
                else
                {
                    Snackbar.Add($"User not found for {person.LeaderFname} {person.LeaderLname}", Severity.Warning);
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error updating account status: {ex.Message}", Severity.Error);
            Console.WriteLine($"Full error: {ex}");
        }
    }

    private async Task RejectPerson(TroopLeader person)
    {
        try
        {
            // Make sure to include ApplicationUser when loading TroopLeader data
            await TroopLeaderService.LoadDataAsync(q =>
                q.Include(t => t.ApplicationUser)
                 .Include(t => t.LeaderPosition)
            );

            // Refresh the person object to get the latest data
            var updatedPerson = TroopLeaderService.Data?
                .FirstOrDefault(t => t.LeaderId == person.LeaderId);

            if (updatedPerson?.ApplicationUser != null)
            {
                updatedPerson.ApplicationUser.AccountStatusId = 3; // Rejected

                // Update using TroopLeaderService - this will handle the user update through EF tracking
                await TroopLeaderService.Update(updatedPerson);

                Snackbar.Add($"Success: Request of {person.LeaderFname} {person.LeaderLname} was Rejected.", Severity.Success);
            }
            else
            {
                Snackbar.Add($"User not found for {person.LeaderFname} {person.LeaderLname}", Severity.Warning);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error updating account status: {ex.Message}", Severity.Error);
        }
    }

    private async Task ShowTroopAssignmentDialog(TroopLeader leader)
    {
        await TroopInformationService.LoadDataAsync();

        var parameters = new DialogParameters
        {
            { "TroopInformations", TroopInformationService.Data?.ToList() },
            { "Context", leader }
        };

        var options = new DialogOptions
        {
            CloseButton = true,
            FullWidth = true,
            MaxWidth = MaxWidth.Small
        };

        var dialog = DialogService.Show<AssignTroopNoDialog>("Assign Troop Number", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is TroopLeader assignedLeader)
        {
            // Troop was assigned successfully, now register the person
            await RegisterPerson(assignedLeader);
        }
    }

    public void Dispose()
    {
        if (_disposed) return;
        _disposed = true;

        try
        {
            _hubConnection?.DisposeAsync();
        }
        catch
        {
            // Ignore disposal errors
        }
    }

    private async Task<bool> IsLeaderAssignedToTroop(int leaderId)
    {
    try
    {
        // Load troop information data
        await TroopInformationService.LoadDataAsync();
        
        // Check if any troop has this leader assigned
        var isAssigned = TroopInformationService.Data?
            .Any(t => t.TroopLeaderId == leaderId) ?? false;
            
        return isAssigned;
    }
    catch (Exception ex)
    {
        Snackbar.Add($"Error checking troop assignment: {ex.Message}", Severity.Error);
        return false;
    }
    }
}