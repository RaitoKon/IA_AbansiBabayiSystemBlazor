@using System.Net.Http.Json
@using IA_AbansiBabayiSystemBlazor.Data
@using IA_AbansiBabayiSystemBlazor.Data.Models
@using Microsoft.EntityFrameworkCore
@using IA_AbansiBabayiSystemBlazor.Service
@using Microsoft.AspNetCore.Identity
@using IA_AbansiBabayiSystemBlazor.Components.Pages
@using Microsoft.AspNetCore.SignalR.Client

@inject ApplicationDbContext GetTroopLeaderData
@inject NavigationManager NavigationManager
@inject TableDataService<TroopLeaderRegistration> TroopService
@inject TableDataService<RegisteredTroopLeader> RegisteredService
@inject TableDataService<TroopLeaderAccount> TroopLeaderAccountService
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IJSRuntime JS
@inject UserManager<ApplicationUser> UserManager
@inject EmailService EmailService
@inject RoleManager<IdentityRole> RoleManager

@implements IDisposable

@page "/troopLeaderRegistrationRequestsPage"
@layout Layout.ThemedLayout

<MudDialogProvider />
<div class="hero-content">

    <MudDataGrid T="TroopLeaderRegistration" 
                 MultiSelection="true" 
                 RowsPerPage="8" 
                 ColumnResizeMode="ResizeMode.Column" 
                 Striped="true" 
                 Items="@FilteredElements" 
                 SortMode="SortMode.Multiple"
                 Filterable="true"
                 Groupable="true"
                 QuickFilter="@_quickFilter" 
                 Hideable="true"    
                 SelectedItems="@_selectedItems" 
                 SelectedItemsChanged="SelectedItemsChanged">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Troop Leader Registration</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
            AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <Columns>
            <SelectColumn T="TroopLeaderRegistration"/>
            <PropertyColumn Property="x => x.LeaderId" Title="ID" Sortable="false" Filterable="false"/>
            <TemplateColumn CellClass="justify-end">           
                <CellTemplate>
                    <MudStack Row>
                        <MudButton Size="@Size.Small"
                                   Variant="@Variant.Filled"
                                   Color="@(delete_switch ? Color.Error : Color.Primary)"
                                   OnClick="@(() => SinglePersonClickedAsync(context.Item))"
                                   Disabled="@singleButtonDisabled">
                            @(delete_switch ? "Delete" : "Register")
                        </MudButton>
                    </MudStack>
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn Title="Full Name" Sortable="true" >
                <CellTemplate Context="context">
                    <span style="white-space: nowrap">
                        @($"{context.Item.LeaderFname}{(string.IsNullOrWhiteSpace(context.Item.LeaderMInitial) ? "" : $" {context.Item.LeaderMInitial[0]}.")} {context.Item.LeaderLname}")
                    </span>
                </CellTemplate>
            </TemplateColumn>
            <PropertyColumn Property="x => x.LeaderPosition"
                            Title="Position"
                            Sortable="false"
                            Filterable="false"
                            Grouping="true"
                            Hidden="true"
                            GroupByOrder="@_groupOrder"
                            GroupExpanded="@_groupExpanded">
                            
            </PropertyColumn>
            <PropertyColumn Property="x => x.LeaderTorNT" Title="Teaching or Non-Teaching" Sortable="false" Filterable="false" />
            <PropertyColumn Property="x => x.LeaderRegStatus" Title="Registration Status" Sortable="false" Filterable="false" />
            <PropertyColumn Property="x => x.LeaderBeneficiary" Title="Beneficiary" Sortable="false" Filterable="false" Editable="true" />
            <PropertyColumn Property="x => x.LeaderBirthdate" Title="Birth Date" Format="MMMM dd, yyyy" Sortable="false" Filterable="false" Editable="true" />
            <PropertyColumn Property="x => x.LeaderEmail" Title="Email" Editable="true" />
        </Columns>
        <PagerContent>

            <MudDataGridPager T="TroopLeaderRegistration" Style="color: #25a129ff;" />
            <div class="pager-addOn">
                <MudButton Size="@Size.Small"
                Variant="@Variant.Filled"
                Color="@(delete_switch ? Color.Error : Color.Primary)"
                OnClick="MultiplePersonClickedAsync"
                Disabled="@multipleButtonDisabled">
                    @(delete_switch ? "Delete Selected" : "Register Selected")
                </MudButton>
                <MudSwitch @bind-Value="delete_switch" Label="Delete" LabelPlacement="Placement.Start" Color="Color.Error" />
            </div>
        </PagerContent>

    </MudDataGrid>

</div>
@code {
    [Inject] private ILogger<TroopLeaderRegistrationRequestsPage>? Logger { get; set; }
    private HubConnection? _hubConnection;

    private TroopLeaderRegistration? _selectedPerson;

    private bool multipleButtonDisabled = true;
    private bool singleButtonDisabled = false;
    public bool delete_switch { get; set; } = false;
    private bool _isDeleteMode => delete_switch;
    private string _searchString = string.Empty;
    private bool isSubmitting = false;

    private IEnumerable<TroopLeaderRegistration> FilteredElements =>
    TroopService.Data?? Enumerable.Empty<TroopLeaderRegistration>();
     
    private HashSet<TroopLeaderRegistration> _selectedItems = new();
    private HashSet<int> _selectedIds = new();

    void SelectedItemsChanged(HashSet<TroopLeaderRegistration> selected)
    {
        _selectedItems = selected;
        _selectedIds = selected.Select(x => x.LeaderId).ToHashSet();

        multipleButtonDisabled = !_selectedItems.Any();
        singleButtonDisabled = _selectedItems.Any();
    }

    // Quick Filter function
    private Func<TroopLeaderRegistration, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        return (x.LeaderFname?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false)
            || (x.LeaderLname?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false)
            || (x.LeaderEmail?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false)
            || (x.LeaderPosition?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false);
    };

    protected override async Task OnInitializedAsync()
    {
        await TroopService.LoadDataAsync();
        TroopService.OnChanged += HandleDataChanged;

        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/autoUpdateHub"))
            .WithAutomaticReconnect()
            .Build();

        _hubConnection.On<string>("ReceiveUpdate", async (tableName) =>
        {
            if (tableName == nameof(TroopLeaderRegistration))
            {
                await TroopService.LoadDataAsync();  // This updates local cache and raises UI event
            }
        });

        await _hubConnection.StartAsync();

    }


    private async void HandleDataChanged()
    {
        _selectedItems = new HashSet<TroopLeaderRegistration>(
            TroopService.Data.Where(x => _selectedIds.Contains(x.LeaderId))
        );
         
        await InvokeAsync(StateHasChanged); // Refresh UI when data changes
    }

    public async void Dispose()
    {
        TroopService.OnChanged -= HandleDataChanged;

        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }


    private async Task RegisterPerson(TroopLeaderRegistration person)
    {
        // Step 1: Create login account
        string Sanitize(string input) => new string(input.Where(char.IsLetterOrDigit).ToArray());

        var first = Sanitize(person.LeaderFname);
        var last = Sanitize(person.LeaderLname);
        var year = DateTime.Now.ToString("yy");

        var userNewEmail = $"{first}.{last}-{year}@igsc.com.ph".ToLower();

        var newUser = new ApplicationUser
        {
            UserName = userNewEmail,
            Email = userNewEmail,
            EmailConfirmed = true,
            MustChangePassword = true
        };

        var tempPassword = GenerateTemporaryPassword.GenerateTempPassword();

        var result = await UserManager.CreateAsync(newUser, tempPassword);

        if (!result.Succeeded)
        {
            foreach (var error in result.Errors)
            {
                Snackbar.Add($"Error: {error.Description}", Severity.Error);
            }
            return;
        }

        // Step 2: Move to RegisteredTroopLeader
        var registeredLeader = new RegisteredTroopLeader
            {
                LeaderFname = person.LeaderFname,
                LeaderMInitial = person.LeaderMInitial,
                LeaderLname = person.LeaderLname,
                LeaderPosition = person.LeaderPosition,
                LeaderRole = person.LeaderRole,
                LeaderTorNT = person.LeaderTorNT,
                LeaderRegStatus = person.LeaderRegStatus,
                LeaderBirthdate = person.LeaderBirthdate,
                LeaderBeneficiary = person.LeaderBeneficiary,
                LeaderEmail = userNewEmail,
            };

        await RegisteredService.Add(registeredLeader);

        await UserManager.AddToRoleAsync(newUser, "Troop Leader");

        // Step 3: Link RegisteredTroopLeader to user account
        var accountLink = new TroopLeaderAccount
            {
                LeaderId = registeredLeader.LeaderId,
                Id = newUser.Id
            };

        await TroopLeaderAccountService.Add(accountLink);

        await EmailService.SendRegisteredConfirmationEmailAsync(userNewEmail, person.LeaderEmail, person.LeaderFname, tempPassword);

        // Step 4: Remove from pending registration
        await TroopService.Delete(person);

        Snackbar.Add($"{person.LeaderFname} {person.LeaderLname} has been registered and account created!", Severity.Success);
    }

    private async Task DeletePerson(TroopLeaderRegistration person)
    {
        if (person == null) return;

        try
        {
            // Use TableDataService to delete and refresh cache
            await TroopService.Delete(person);

            // Show snackbar
            Snackbar.Add($"{person.LeaderFname} {person.LeaderMInitial} {person.LeaderLname} has been removed successfully!", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error deleting {person.LeaderFname} {person.LeaderLname}: {ex.Message}", Severity.Error);
        }
    }

    private async Task ShowConfirmationDialog(bool isSingle, bool isDelete)
    {

        string message;
        string title;

        if (isSingle && _selectedPerson != null)
        {
            title = isDelete ? "Confirm Deletion" : "Confirm Registration";
            message = isDelete
                ? $"Are you sure you want to delete the request of <b>{_selectedPerson.LeaderFname} {_selectedPerson.LeaderLname}</b>?"
                : $"Are you sure you want to register <b>{_selectedPerson.LeaderFname} {_selectedPerson.LeaderLname}</b> as a <b>{_selectedPerson.LeaderPosition}</b>?";
        }
        else if (!isSingle && _selectedItems.Any())
        {
            title = isDelete ? "Confirm Multiple Deletions" : "Confirm Multiple Registrations";
            var names = string.Join("</li><li>", _selectedItems.Select(p => $"{p.LeaderFname} {p.LeaderLname}"));
            message = isDelete
                ? $"Are you sure you want to delete these registration requests?<ul><li>{names}</li></ul>"
                : $"Are you sure you want to remove these Troop Leaders?<ul><li>{names}</li></ul>";
        }
        else
        {
            return;
        }

        var parameters = new DialogParameters {
        { "Content", message },
        { "IsDelete", isDelete }  // Pass the delete mode to the dialog
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = DialogService.Show<ConfirmationDialog>(title, parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            if (isSingle)
            {
                if (isDelete) await DeletePerson(_selectedPerson);
                else await RegisterPerson(_selectedPerson);
            }
            else
            {
                foreach (var person in _selectedItems.ToList())
                {
                    if (isDelete) await DeletePerson(person);
                    else await RegisterPerson(person);
                }
            }
        }

    }


    private async Task SinglePersonClickedAsync(TroopLeaderRegistration person)
    {
        _selectedPerson = person; // Store the selected person
        await ShowConfirmationDialog(isSingle: true, isDelete: delete_switch);
    }

    private async Task MultiplePersonClickedAsync()
    {
        if (_selectedItems == null || !_selectedItems.Any()) return;
        await ShowConfirmationDialog(isSingle: false, isDelete: delete_switch);
    }

    private bool _groupByPosition = true; // enable grouping on load
    private int _groupOrder = 0;              // group priority
    private bool _groupExpanded = true;       // whether it's expanded initially
}

