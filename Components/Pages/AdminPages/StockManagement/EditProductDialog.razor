@using IA_AbansiBabayiSystemBlazor.Data.Models
@using MudBlazor
@using Microsoft.AspNetCore.Components.Forms
@inject IWebHostEnvironment Env

<MudForm @ref="form">
    <MudText Typo="Typo.h6" Class="mb-3">Edit Product</MudText>

    <MudTextField @bind-Value="EditingProduct.ProductName" Label="Name" Variant="Variant.Outlined" Required="true" Class="mb-3" />
    <MudNumericField @bind-Value="EditingProduct.ProductPrice" Label="Price (₱)" Variant="Variant.Outlined" Required="true" Class="mb-3" />

    <MudSelect T="int?" @bind-Value="EditingProduct.ProductCategoryId" Label="Category" Variant="Variant.Outlined" Required="true">
        @foreach (var cat in Categories)
        {
            <MudSelectItem T="int?" Value="@cat.ProductCategoryId">
                @cat.ProductCategoryName
            </MudSelectItem>
        }
    </MudSelect>



    <MudTextField @bind-Value="EditingProduct.ProductDescription" Label="Description" Lines="3" Variant="Variant.Outlined" Class="mb-3" />

    <!-- Image Upload -->
    <InputFile OnChange="OnFileSelected" />
    <MudText Typo="Typo.body1" Class="mb-1">Product Image</MudText>

    <label class="mud-button mud-button-outlined mud-button-primary" style="cursor:pointer;">
        Select Image to Upload
        <InputFile OnChange="OnFileSelected" style="display:none;" />
    </label>

    @if (!string.IsNullOrEmpty(_previewImagePath) || !string.IsNullOrEmpty(EditingProduct.ProductImagePath))
    {
        <img src="@(_previewImagePath ?? EditingProduct.ProductImagePath)"
             alt="Preview"
             style="max-height:150px; margin-top:10px; border-radius:6px;" />
    }

    <MudStack Row="true" JustifyContent="FlexEnd" Spacing="2" Class="mt-4">
        <MudButton OnClick="Save" Color="Color.Primary" Variant="Variant.Filled">Save</MudButton>
        <MudButton OnClick="Cancel" Color="Color.Secondary" Variant="Variant.Outlined">Cancel</MudButton>
    </MudStack>
</MudForm>

@code {
    [Parameter] public Product EditingProduct { get; set; } = new();
    [Parameter] public List<ProductCategory> Categories { get; set; } = new();

    [Inject] private TableDataService<Product> ProductService { get; set; } = default!;
    [Inject] private ISnackbar Snackbar { get; set; } = default!;

    [CascadingParameter] public IMudDialogInstance MudDialog { get; set; } = default!;

    private MudForm form;
    private IBrowserFile? _selectedFile;
    private string? _previewImagePath;

    private async Task OnFileSelected(InputFileChangeEventArgs e)
    {
        _selectedFile = e.File;

        var uploadsPath = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "Products");
        if (!Directory.Exists(uploadsPath))
            Directory.CreateDirectory(uploadsPath);

        // Delete old file if it exists and isn’t the default image
        if (!string.IsNullOrEmpty(EditingProduct.ProductImagePath) &&
            !EditingProduct.ProductImagePath.EndsWith("no-image.png"))
        {
            var oldFilePath = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", EditingProduct.ProductImagePath.TrimStart('/'));
            if (File.Exists(oldFilePath))
            {
                File.Delete(oldFilePath);
            }
        }

        // Save new file
        var fileName = $"{Guid.NewGuid()}{Path.GetExtension(_selectedFile.Name)}";
        var filePath = Path.Combine(uploadsPath, fileName);

        await using var stream = File.Create(filePath);
        await _selectedFile.OpenReadStream().CopyToAsync(stream);

        // Update preview path
        _previewImagePath = $"/Products/{fileName}";
    }

    private async Task Save()
    {
        await form.Validate();
        if (form.IsValid)
        {
            if (!string.IsNullOrEmpty(_previewImagePath))
                EditingProduct.ProductImagePath = _previewImagePath;
            else if (string.IsNullOrEmpty(EditingProduct.ProductImagePath))
                EditingProduct.ProductImagePath = "/Products/no-image.png";

            await ProductService.Update(EditingProduct);
            Snackbar.Add("Product updated successfully!", Severity.Success);
            MudDialog.Close(DialogResult.Ok(true));
        }
    }

    private void Cancel() => MudDialog.Cancel();
}
