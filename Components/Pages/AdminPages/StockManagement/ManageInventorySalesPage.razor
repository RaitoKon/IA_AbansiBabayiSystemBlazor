@page "/manageInventorySalesPage"
@using IA_AbansiBabayiSystemBlazor.Data.Models
@using Microsoft.AspNetCore.SignalR.Client
@inject ISnackbar Snackbar
@inject TableDataService<Product> ProductService
@inject TableDataService<ProductCategory> ProductCategoryService
@inject TableDataService<ProductSale> ProductSaleService
@inject TableDataService<ProductPurchase> ProductPurchaseService
@inject NavigationManager NavigationManager

@layout Layout.ThemedLayout

<div class="hero-content">

    <MudGrid Class="p-6">
        <!-- Left Side: Add Sale -->
        <MudItem xs="12" md="4">
            <MudPaper Class="pa-8">
                <MudForm @ref="saleForm">
                    <MudText Typo="Typo.h5" Class="mb-3 font-bold text-green-700">Add New Sale</MudText>

                    <MudAutocomplete T="Product"
                                     Label="Select Product"
                                     Value="@_selectedProduct"
                                     ValueChanged="OnProductSelected"
                                     ToStringFunc="p => p?.ProductName"
                                     SearchFunc="SearchProducts"
                                     CoerceText="true"
                                     Clearable="true"
                                     Required="true"
                                     Class="mb-3">
                    </MudAutocomplete>



                    <!-- Quantity Sold -->
                    <MudNumericField T="int?"
                                     @bind-Value="_enteredSaleQuantity"
                                     Label="Quantity Sold"
                                     Required="true"
                                     Class="mb-1"
                                     Min="1"
                                     Max="@(_selectedProduct != null ? _selectedProduct.ProductStock ?? 0 : int.MaxValue)"
                                     Immediate="true" />

                    <!-- ✅ Show current stock info -->
                    @if (_selectedProduct != null)
                    {
                        <MudText Typo="Typo.caption" Class="text-gray-600">
                            Available Stock: @_selectedProduct.ProductStock
                        </MudText>
                    }

                    <!-- Sale price -->
                    <MudNumericField T="decimal?" @bind-Value="_enteredSalePrice" Label="Sale Price (₱)" Required="true" Class="mb-3" Min="0" />

                    <MudButton OnClick="AddSale" Variant="Variant.Filled" Color="Color.Primary">Add Sale</MudButton>
                </MudForm>
            </MudPaper>
        </MudItem>

        <!-- Right Side: Manage Sales -->
        <MudItem xs="12" md="8">
            <MudPaper Class="pa-8 rounded-lg shadow-md">
                <MudText Typo="Typo.h5" Class="mb-3 font-bold text-blue-700">Manage Sales</MudText>

                <MudStack Row="true" Spacing="2" Class="mb-4">
                    <MudTextField T="string"
                                  Value="_searchText"
                                  ValueChanged="OnSearchChanged"
                                  Immediate="true"
                                  Placeholder="Search by Product Name"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Search"
                                  Class="flex-grow">
                    </MudTextField>
                    <MudSelect T="string" Label="Category"
                               Value="_manageCategoryName"
                               ValueChanged="OnCategoryChanged"
                               Class="mb-3">
                        <MudSelectItem T="string" Value="_categoryAll">All</MudSelectItem>
                        @foreach (var category in Categories)
                        {
                            <MudSelectItem T="string" Value="@category.ProductCategoryName">@category.ProductCategoryName</MudSelectItem>
                        }
                    </MudSelect>
                </MudStack>

                <MudTable T="ProductSaleRow" ServerData="LoadSales" @ref="table" Dense="true" Hover="true" Bordered="true" Striped="true">
                    <HeaderContent>
                        <MudTh>Product Name</MudTh>
                        <MudTh>Sale Price</MudTh>
                        <MudTh>Stock Out</MudTh>
                        <MudTh>Total Revenue</MudTh>
                        <MudTh>Cumulative Stock</MudTh>
                        <MudTh>Sale Date</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <!-- ✅ Safe Product Name -->
                        <MudTd>
                            @(
                                                        Products.FirstOrDefault(c => c.ProductId == context.Sale.ProductId)?.ProductName
                                                        ?? "[Inactive Product]"
                                                        )
                        </MudTd>

                        <MudTd>₱@context.Sale.ProductSalePrice</MudTd>
                        <MudTd>@context.Sale.ProductSaleQuantity</MudTd>
                        <MudTd>@(context.Sale.ProductSalePrice* context.Sale.ProductSaleQuantity)</MudTd>
                        <MudTd>@context.RemainingStock</MudTd>
                        <MudTd>
                            @(context.Sale.ProductSaleDate.HasValue
                                                        ? context.Sale.ProductSaleDate.Value.ToString("MM/dd/yyyy hh:mm tt").ToUpper()
                                                        : "-")
                        </MudTd>
                    </RowTemplate>
                </MudTable>

            </MudPaper>
        </MudItem>
    </MudGrid>
</div>

@code {
    // --- State ---
    private HubConnection? _hubConnection;
    private List<ProductCategory> Categories = new();
    private List<ProductSale> Sales = new();
    private List<Product> Products = new();
    private List<ProductPurchase> Purchases = new();
    private MudTable<ProductSaleRow> table;
    private MudForm saleForm;
    private Product? _selectedProduct;
    private int? _enteredSaleQuantity;
    private decimal? _enteredSalePrice;
    private string _searchText;
    private string _manageCategoryName { get; set; } = string.Empty;
    private string _categoryAll = null;

    // --- Lifecycle ---
    protected override async Task OnInitializedAsync()
    {
        await ProductCategoryService.LoadDataAsync();
        await ProductSaleService.LoadDataAsync();
        await ProductService.LoadDataAsync();
        await ProductPurchaseService.LoadDataAsync();

        Purchases = ProductPurchaseService.Data.ToList();
        Products = ProductService.Data.ToList();
        Categories = ProductCategoryService.Data.ToList();

        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/autoUpdateHub"))
            .WithAutomaticReconnect()
            .Build();

        _hubConnection.On<string>("ReceiveUpdate", async (tableName) =>
        {
            if (tableName == nameof(ProductSale))
            {
                await ProductCategoryService.LoadDataAsync();
                await ProductSaleService.LoadDataAsync();
                await ProductService.LoadDataAsync();

                Products = ProductService.Data.ToList();
                Categories = ProductCategoryService.Data.ToList();

                if (table != null)
                    await InvokeAsync(() => table.ReloadServerData());
            }
        });

        await _hubConnection.StartAsync();
    }

    // --- Table Data Loading ---
    private async Task<TableData<ProductSaleRow>> LoadSales(TableState state, CancellationToken cancellationToken)
    {
        await ProductSaleService.LoadDataAsync();
        await ProductService.LoadDataAsync();

        var sales = ProductSaleService.Data.OrderBy(s => s.ProductSaleDate).ToList();

        // Search filter
        if (!string.IsNullOrWhiteSpace(_searchText))
        {
            sales = sales.Where(s =>
            {
                var productName = Products.FirstOrDefault(x => x.ProductId == s.ProductId)?.ProductName ?? "";
                return productName.Contains(_searchText, StringComparison.OrdinalIgnoreCase);
            }).ToList();
        }

        // Compute stock per product (up to each sale)
        var tableRows = new List<ProductSaleRow>();
        foreach (var s in sales.OrderBy(s => s.ProductSaleDate)) // chronological order
        {
            if (!s.ProductId.HasValue) continue;
            int productId = s.ProductId.Value;

            int purchasedUpToNow = Purchases
                .Where(p => p.ProductId == productId && p.ProductPurchaseDate <= s.ProductSaleDate)
                .Sum(p => p.ProductPurchaseQuantity ?? 0);

            int soldUpToNow = sales
                .Where(x => x.ProductId == productId && x.ProductSaleDate <= s.ProductSaleDate)
                .Sum(x => x.ProductSaleQuantity ?? 0);

            int remaining = purchasedUpToNow - soldUpToNow;

            tableRows.Add(new ProductSaleRow
            {
                Sale = s,
                RemainingStock = remaining
            });
        }

        var totalItems = tableRows.Count;
        var items = tableRows
            .Skip(state.Page * state.PageSize)
            .Take(state.PageSize)
            .ToList();

        return new TableData<ProductSaleRow>
        {
            TotalItems = totalItems,
            Items = items
        };
    }

    private void OnProductSelected(Product? product)
    {
        _selectedProduct = product;

        if (_selectedProduct != null)
        {
            // ✅ Auto-fill selling price from Manage Products
            _enteredSalePrice = _selectedProduct.ProductPrice;
        }
        else
        {
            _enteredSalePrice = 0; // reset when cleared
        }
    }


    // --- Sale Actions ---
    private async Task AddSale()
    {
        var product = _selectedProduct;
        if (product == null)
        {
            Snackbar.Add("Invalid product selected.", Severity.Error);
            return;
        }

        if (_enteredSaleQuantity <= 0)
        {
            Snackbar.Add("Quantity must be at least 1.", Severity.Warning);
            return;
        }

        if (_enteredSaleQuantity > product.ProductStock)
        {
            Snackbar.Add($"Cannot sell more than available stock ({product.ProductStock}).", Severity.Warning);
            return;
        }

        // ✅ Prevent empty or zero quantity
        if (!_enteredSaleQuantity.HasValue || _enteredSaleQuantity <= 0)
        {
            Snackbar.Add("Quantity sold cannot be empty or zero!", Severity.Warning);
            return;
        }

        var newSale = new ProductSale
        {
            ProductId = product.ProductId,
            ProductSaleQuantity = _enteredSaleQuantity,
            ProductSalePrice = _enteredSalePrice,
            ProductSaleDate = DateTime.Now
        };

        await ProductSaleService.Add(newSale);

        // Update stock
        product.ProductStock -= _enteredSaleQuantity;
        await ProductService.Update(product);

        Snackbar.Add("Sale recorded and stock updated!", Severity.Success);

        await ProductSaleService.LoadDataAsync();
        await ProductService.LoadDataAsync();

        if (table != null)
            await table.ReloadServerData();

        await saleForm.ResetAsync();
        StateHasChanged();
    }

    // --- Filters ---
    private async Task OnSearchChanged(string value)
    {
        _searchText = value;
        if (table != null)
            await table.ReloadServerData();
    }

    private async Task OnCategoryChanged(string value)
    {
        _manageCategoryName = value;
        if (table != null)
            await table.ReloadServerData();
    }

    // --- Models ---
    public class ProductSaleRow
    {
        public ProductSale Sale { get; set; }
        public int RemainingStock { get; set; }
    }

    // --- Autocomplete ---
    private Task<IEnumerable<Product>> SearchProducts(string value, CancellationToken cancellationToken)
    {
        if (string.IsNullOrWhiteSpace(value))
            return Task.FromResult(Products.AsEnumerable());

        var result = Products
            .Where(p => p.ProductName.Contains(value, StringComparison.OrdinalIgnoreCase));

        return Task.FromResult(result);
    }
}
