@using System.Net.Http.Json
@using IA_AbansiBabayiSystemBlazor.Data
@using IA_AbansiBabayiSystemBlazor.Data.Models
@using Microsoft.EntityFrameworkCore
@using IA_AbansiBabayiSystemBlazor.Service
@using IA_AbansiBabayiSystemBlazor.Services
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.SignalR.Client

@inject ApplicationDbContext GetTroopMemberData
@inject NavigationManager NavigationManager
@inject TableDataService<TroopMember> TroopMemberService
@inject TableDataService<TroopLeader> TroopLeaderService
@inject TableDataService<TroopInformation> TroopInformationService
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IJSRuntime JS
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider

@inject AuthenticatorService AuthenticatorService

@page "/scoutDashboardPage"
@layout Layout.ThemedLayout
@attribute [Authorize(Roles = "Troop Leader")]

<MudDialogProvider />
<div class="hero-content">

    <MudDataGrid T="TroopMember"
                 @ref="dataGrid"
                 MultiSelection="@(!_isEditMode)"
                 RowsPerPage="8"
                 ColumnResizeMode="ResizeMode.Column"
                 Striped="true"
                 Items="@FilteredElements"
                 SortMode="SortMode.Multiple"
                 Filterable="true"
                 Groupable="true"
                 QuickFilter="@_quickFilter"
                 Hideable="true"
                 SelectedItems="@_selectedItems"
                 SelectedItemsChanged="SelectedItemsChanged"
                 GroupStyleFunc="GroupBackgroundColor"
                 ReadOnly="@_readOnly"
                 EditMode="DataGridEditMode.Form"
                 EditTrigger="DataGridEditTrigger.Manual"
                 RowClick="@(args => OnRowClicked(args))"
                 CommittedItemChanges="OnCommitEdit">

        <ToolBarContent>
            <MudText Typo="Typo.h6">Scout Registration</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <Columns>
            <SelectColumn T="TroopMember" Hidden="@(_isEditMode)" />
            <PropertyColumn Property="x => x.TroopMemId" Title="ID" Editable="false" Sortable="false" Filterable="false" />
            <TemplateColumn CellClass="justify-end">
                <CellTemplate>
                    <MudStack Row>
                        <MudButton Size="@Size.Small"
                                   Variant="@Variant.Filled"
                                   Color="Color.Error"
                                   OnClick="@(() => SinglePersonClickedAsync(context.Item))"
                                   Disabled="@(singleButtonDisabled || _isEditMode)">
                            Archive
                        </MudButton>
                    </MudStack>
                </CellTemplate>
            </TemplateColumn>
            <PropertyColumn Property="x => x.TroopMemTroopNo" Title="Troop Number" Sortable="false" Filterable="false" Editable="false" />
            <PropertyColumn Property="x => x.TroopMemScoutNumber" Title="Scout Number" Sortable="false" Filterable="false" />
            <TemplateColumn Title="Full Name" Sortable="true">
                <CellTemplate Context="context">
                    <span style="white-space: nowrap">
                        @($"{context.Item.TroopMemFname}{(string.IsNullOrWhiteSpace(context.Item.TroopMemMname) ? "" : $" {context.Item.TroopMemMname[0]}.")} {context.Item.TroopMemLname}")
                    </span>
                </CellTemplate>
                <EditTemplate>
                    <MudGrid>
                        <MudItem xs="12" sm="4">
                            <MudTextField @bind-Value="context.Item.TroopMemFname"
                                          Label="First Name"
                                          Variant="Variant.Outlined"
                                          Required="true"
                                          Disabled="true" />
                        </MudItem>
                        <MudItem xs="12" sm="4">
                            <MudTextField @bind-Value="context.Item.TroopMemMname"
                                          Label="Middle Name"
                                          Variant="Variant.Outlined"
                                          Disabled="true" />
                        </MudItem>
                        <MudItem xs="12" sm="4">
                            <MudTextField @bind-Value="context.Item.TroopMemLname"
                                          Label="Last Name"
                                          Variant="Variant.Outlined"
                                          Required="true"
                                          Disabled="true" />
                        </MudItem>
                    </MudGrid>
                </EditTemplate>
            </TemplateColumn>
            <TemplateColumn Title="Scout Level" Sortable="false" Filterable="false">
                <CellTemplate>
                    @context.Item.TroopMemScoutLevel.TroopMemScoutLevel
                </CellTemplate>
                <EditTemplate Context="context">
                    @{
                        var item = context.Item;
                    }
                    <MudSelect T="int?"
                               @bind-Value="item.TroopMemScoutLevelId"
                               Label="Scout Level"
                               Variant="Variant.Outlined"
                               Required="true">
                        @foreach (var scoutlevel in _scoutLevels)
                        {
                            <MudSelectItem T="int?" Value="@scoutlevel.TroopMemScoutLevelId">@scoutlevel.TroopMemScoutLevel</MudSelectItem>
                        }
                    </MudSelect>
                </EditTemplate>
            </TemplateColumn>
            <PropertyColumn Property="x => x.TroopMemGradeOrYear" Title="Grade or Year" Sortable="false" Filterable="false" />
            <TemplateColumn Title="Registration Status" Sortable="false" Filterable="false">
                <CellTemplate>
                    @context.Item.TroopMemRegStatus
                </CellTemplate>
                <EditTemplate>
                    <MudSelect T="string" @bind-Value="context.Item.TroopMemRegStatus" Label="Registration Status" Variant="Variant.Outlined">
                        <MudSelectItem Value="@("Existing Scout")">Existing Scout</MudSelectItem>
                        <MudSelectItem Value="@("New Scout")">New Scout</MudSelectItem>
                    </MudSelect>
                </EditTemplate>
            </TemplateColumn>
            <PropertyColumn Property="x => x.TroopMemBeneficiary" Title="Beneficiary" Sortable="false" Filterable="false" Editable="true" />
            <TemplateColumn Title="Birth Date" Sortable="false" Filterable="false">
                <CellTemplate>
                    @context.Item.TroopMemBirthdate?.ToString("MMMM dd, yyyy")
                </CellTemplate>
                <EditTemplate>
                    <MudDatePicker @bind-Date="context.Item.TroopMemBirthdate"
                                   Label="Birth Date"
                                   Variant="Variant.Outlined"
                                   DateFormat="MMMM dd, yyyy" />
                </EditTemplate>
            </TemplateColumn>
            <PropertyColumn Property="x => x.TroopMemEmail" Title="Email" Editable="false" />
            <PropertyColumn Property="x => x.TroopMemRegisteredEmail" Title="Registered Email" Editable="false" />
        </Columns>

        <PagerContent>
            <MudDataGridPager T="TroopMember" Style="color: #25a129ff;" />
            <div class="pager-addOn">
                <MudButton Size="@Size.Small"
                           Variant="@Variant.Filled"
                           Color="Color.Error"
                           OnClick="MultiplePersonClickedAsync"
                           Disabled="@(multipleButtonDisabled || _isEditMode)">
                    Archive Selected
                </MudButton>
                <MudSwitch @bind-Value="@_isEditMode" Label="Edit Mode" LabelPlacement="Placement.Start" Color="Color.Primary" />
            </div>
        </PagerContent>

    </MudDataGrid>

</div>
@code {
    private TroopMember? _selectedPerson;
    private HubConnection? _hubConnection;

    private string[] troopRoles = { "Twinklers", "Star", "Junior", "Senior", "Cadet" };
    private string[] registrationStatuses = { "New","Existing" };
    private bool multipleButtonDisabled = true;
    private bool singleButtonDisabled = false;
    private string _searchString = string.Empty;
    private bool isSubmitting = false;
    public bool Archive_switch { get; set; } = true;
    private bool _isArchiveMode => Archive_switch;
    private bool _isEditMode;
    private bool _readOnly;

    private int _currentTroopLeaderId;
    private TroopInformation _currentTroopLeader;

    private MudDataGrid<TroopMember> dataGrid;

    private IEnumerable<TroopMember> FilteredElements => (TroopMemberService.Data ?? Enumerable.Empty<TroopMember>())
    .Where(x => x.ApplicationUser != null && x.ApplicationUser.AccountStatusId == 2 &&
                   x.TroopMemTroopNo == _currentTroopLeader?.TroopNo);

    private HashSet<TroopMember> _selectedItems = new();
    private HashSet<int> _selectedIds = new();
    private HashSet<TroopMember> GetSelectedItems()
    {
        if (TroopMemberService.Data == null) return new();
        return TroopMemberService.Data.Where(x => _selectedIds.Contains(x.TroopMemId)).ToHashSet();
    }

    private List<TroopMemberScoutLevel> _scoutLevels = new();

    void SelectedItemsChanged(HashSet<TroopMember> selected)
    {
        if (_isEditMode)
        {
            return;
        }
        _selectedItems = selected;
        _selectedIds = selected.Select(i => i.TroopMemId).ToHashSet();

        multipleButtonDisabled = !_selectedItems.Any();
        singleButtonDisabled = _selectedItems.Any();
    }

    // Quick Filter function
    private Func<TroopMember, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        return (x.TroopMemFname?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false)
            || (x.TroopMemLname?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false)
            || (x.TroopMemEmail?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false)
            || (x.UserRole?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false)
            || (x.TroopMemGradeOrYear?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false)
            || (x.TroopMemRegStatus?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false)
            || (x.TroopMemBeneficiary?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false)
            || (x.TroopMemBirthdate?.ToString("MMMM dd, yyyy").Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false)
            || (x.TroopMemEmail?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false);
    };


    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadScoutLevels();

            var currentUser = await AuthenticatorService.GetCurrentUserAsync();

            if (currentUser != null)
            {
                // Load troop leaders to find the current user's troop leader record
                await TroopLeaderService.LoadDataAsync(q =>
                    q.Include(t => t.ApplicationUser)
                     .Include(t => t.LeaderPosition)
                );

                // Find the troop leader record for this user
                var currentTroopLeader = TroopLeaderService.Data?
                    .FirstOrDefault(t => t.ApplicationUser?.Id == currentUser.Id);

                _currentTroopLeaderId = currentTroopLeader?.LeaderId ?? 0;

                // Load troop information and find the troop this leader manages
                await TroopInformationService.LoadDataAsync();
                _currentTroopLeader = TroopInformationService.Data?
                    .FirstOrDefault(t => t.TroopLeaderId == _currentTroopLeaderId);
            }

            // Load troop members (scouts)
            await TroopMemberService.LoadDataAsync(q =>
                q.Include(t => t.ApplicationUser)
                 .Include(t => t.TroopMemScoutLevel)
            );

            // Rest of your SignalR setup...
            _hubConnection = new HubConnectionBuilder()
                .WithUrl(NavigationManager.ToAbsoluteUri("/autoUpdateHub"))
                .WithAutomaticReconnect()
                .Build();

            _hubConnection.On<string>("ReceiveUpdate", async (tableName) =>
            {
                if (tableName == nameof(TroopMember))
                {
                    await InvokeAsync(async () =>
                    {
                        var currentIds = _selectedItems.Select(x => x.TroopMemId).ToHashSet();
                        await TroopMemberService.LoadDataAsync(q =>
                            q.Include(t => t.ApplicationUser)
                             .Include(t => t.TroopMemScoutLevel)
                        );

                        if (TroopMemberService.Data != null)
                        {
                            _selectedItems = TroopMemberService.Data
                                .Where(x => currentIds.Contains(x.TroopMemId))
                                .ToHashSet();
                        }
                        StateHasChanged();
                    });
                }
            });

            await _hubConnection.StartAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error initializing page: {ex.Message}", Severity.Error);
        }
    }

    private void HandleDataChanged()
    {
        if (TroopMemberService.Data != null && _selectedIds.Any())
        {
            _selectedItems = TroopMemberService.Data
                .Where(x => _selectedIds.Contains(x.TroopMemId))
                .ToHashSet();
        }
        _selectedItems = new HashSet<TroopMember>(_selectedItems);
        InvokeAsync(StateHasChanged); // Refresh UI when data changes
    }

    public async void Dispose()
    {
        TroopMemberService.OnChanged -= HandleDataChanged;

        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }

    private async Task ArchivePerson(TroopMember person)
    {
        try
        {
            // Make sure to include ApplicationUser when loading TroopLeader data
            await TroopMemberService.LoadDataAsync(q =>
                q.Include(t => t.ApplicationUser)
                .Include(t => t.TroopMemScoutLevel)
            );

            // Refresh the person object to get the latest data
            var updatedPerson = TroopMemberService.Data?
                .FirstOrDefault(t => t.TroopMemId == person.TroopMemId);

            if (updatedPerson?.ApplicationUser != null)
            {
                updatedPerson.ApplicationUser.AccountStatusId = 4; // Rejected

                // Update using TroopLeaderService - this will handle the user update through EF tracking
                await TroopMemberService.Update(updatedPerson);

                Snackbar.Add($"Success: {person.TroopMemFname} {person.TroopMemLname} was moved to Archive.", Severity.Success);
            }
            else
            {
                Snackbar.Add($"User not found for {person.TroopMemFname} {person.TroopMemLname}", Severity.Warning);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error updating account status: {ex.Message}", Severity.Error);
        }
    }


    private async Task ShowArchiveDialog(bool isSingle, bool isArchive)
    {
        string message;
        string title;

        if (isSingle && _selectedPerson != null)
        {
            title = "Confirm Archive";
            message = $"Are you sure you want to Archive <b>{_selectedPerson.TroopMemFname} {_selectedPerson.TroopMemLname}</b>?";
        }
        else if (!isSingle && _selectedItems.Any())
        {
            title = "Confirm Multiple Archive";
            var names = string.Join("</li><li style=\"padding: 5px 0;\">", _selectedItems.Select(p => $"{p.TroopMemFname} {p.TroopMemLname}"));
            message = $"Are you sure you want to Archive these selected people?<ul style=\"padding-left: 20px; margin: 10px 0;\"><li style=\"padding: 5px 0;\">{names}</li></ul>";
        }
        else
        {
            return;
        }

        var parameters = new DialogParameters {
            { "Content", message },
            { "IsSingle", isSingle }
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = DialogService.Show<ArchiveDialog>(title, parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            if (isSingle)
            {
                if (isArchive) await ArchivePerson(_selectedPerson);
            }
            else
            {
                foreach (var person in _selectedItems.ToList())
                {
                    if (isArchive) await ArchivePerson(person);
                }
            }
        }
    }

    private async Task SinglePersonClickedAsync(TroopMember person)
    {
        _selectedPerson = person; // Store the selected person
        await ShowArchiveDialog(isSingle: true, isArchive: Archive_switch);
    }

    private async Task MultiplePersonClickedAsync()
    {
        if (_selectedItems == null || !_selectedItems.Any()) return;
        await ShowArchiveDialog(isSingle: false, isArchive: Archive_switch);
    }

    private async Task OnCommitEdit(TroopMember item)
    {
        try
        {
            // Use a fresh context to avoid tracking issues
            await using var freshContext = GetTroopMemberData; // or create a new scope if needed

            // Get the existing entity from database
            var existingEntity = await GetTroopMemberData.TroopMembers
            .Include(t => t.TroopMemScoutLevel)
            .FirstOrDefaultAsync(t => t.TroopMemId == item.TroopMemId);

            if (existingEntity != null)
            {
                // Update only the changed fields
                existingEntity.TroopMemFname = item.TroopMemFname;
                existingEntity.TroopMemMname = item.TroopMemMname;
                existingEntity.TroopMemLname = item.TroopMemLname;
                existingEntity.TroopMemScoutLevel = item.TroopMemScoutLevel; // This is crucial!
                existingEntity.TroopMemGradeOrYear = item.TroopMemGradeOrYear;
                existingEntity.TroopMemRegStatus = item.TroopMemRegStatus;
                existingEntity.TroopMemBeneficiary = item.TroopMemBeneficiary;
                existingEntity.TroopMemBirthdate = item.TroopMemBirthdate;
                existingEntity.TroopMemEmail = item.TroopMemEmail;

                await freshContext.SaveChangesAsync();
                Snackbar.Add("Changes saved successfully!", Severity.Success);

                // Refresh the service data
                await TroopLeaderService.LoadDataAsync(q =>
                    q.Include(t => t.ApplicationUser)
                     .Include(t => t.LeaderPosition)
                );
            }
            else
            {
                Snackbar.Add("Error: Troop leader not found in database", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error saving changes: {ex.Message}", Severity.Error);
            Console.WriteLine($"Detailed error: {ex}");
        }
    }

    private async Task OnRowClicked(DataGridRowClickEventArgs<TroopMember> args)
    {
        if (_isEditMode && !isSubmitting)
        {
            try
            {
                isSubmitting = true;
                await InvokeAsync(async () =>
                {
                    await dataGrid.SetEditingItemAsync(args.Item);
                    StateHasChanged();
                });
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error entering edit mode: {ex.Message}", Severity.Error);
            }
            finally
            {
                isSubmitting = false;
            }
        }
    }

    private async Task LoadScoutLevels()
    {
        try
        {
            _scoutLevels = await GetTroopMemberData.TroopMemberScoutLevels
                .AsNoTracking()
                .ToListAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading positions: {ex.Message}", Severity.Error);
        }
    }

    private string GroupBackgroundColor(GroupDefinition<TroopMember> item)
    {
        switch (item.Grouping.Key?.ToString())
        {
            case "Twinklers":
                return "background: linear-gradient(to right, #f467a4 0%, #f9b8d4 30%, #ffffff 100%); color: #ffffff;"; // Pink gradient

            case "Star":
                return "background: linear-gradient(to right, #f6e03a 0%, #faf0a0 30%, #ffffff 100%); color: #ffffff;"; // Yellow gradient

            case "Junior":
                return "background: linear-gradient(to right, #fdbd23 0%, #fee6a1 30%, #ffffff 100%); color: #ffffff;"; // Orange gradient

            case "Senior":
                return "background: linear-gradient(to right, #ff8546 0%, #ffc5a8 30%, #ffffff 100%); color: #ffffff;"; // Coral gradient

            case "Cadet":
                return "background: linear-gradient(to right, #a821e5 0%, #d9a6f2 30%, #ffffff 100%); color: #ffffff;"; // Purple gradient

            default:
                return "background-color: transparent; color: #000000;"; // fallback
        }
    }

    
    private bool _groupByPosition = true; // enable grouping on load
    private int _groupOrder = 0;              // group priority
    private bool _groupExpanded = true;       // whether it's expanded initially
}