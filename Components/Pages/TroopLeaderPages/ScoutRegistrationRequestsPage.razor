@using System.Net.Http.Json
@using IA_AbansiBabayiSystemBlazor.Data
@using IA_AbansiBabayiSystemBlazor.Data.Models
@using Microsoft.EntityFrameworkCore
@using IA_AbansiBabayiSystemBlazor.Service
@using IA_AbansiBabayiSystemBlazor.Services
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.SignalR.Client

@inject NavigationManager NavigationManager
@inject TableDataService<TroopMember> TroopMemberService
@inject TableDataService<TroopLeader> TroopLeaderService
@inject TableDataService<TroopInformation> TroopInformationService
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IJSRuntime JS
@inject IServiceProvider ServiceProvider
@inject UserManager<ApplicationUser> UserManager
@inject EmailService EmailService
@inject RoleManager<IdentityRole> RoleManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject AuthenticatorService AuthenticatorService

@page "/scoutRegistrationRequestsPage"
@layout Layout.ThemedLayout
@attribute [Authorize(Roles = "Troop Leader")]

<MudDialogProvider />
<div class="hero-content">

    <MudDataGrid T="TroopMember"
                 MultiSelection="true"
                 RowsPerPage="8"
                 ColumnResizeMode="ResizeMode.Column"
                 Striped="true"
                 Items="@FilteredElements"
                 SortMode="SortMode.Multiple"
                 Filterable="true"
                 Groupable="true"
                 QuickFilter="@_quickFilter"
                 Hideable="true"
                 SelectedItems="@_selectedItems"
                 SelectedItemsChanged="SelectedItemsChanged"
                 GroupStyleFunc="GroupBackgroundColor">

        <ToolBarContent>
            <MudText Typo="Typo.h6">Scout Registration</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <Columns>
            <PropertyColumn Property="x => x.TroopMemId" Title="ID" Sortable="false" Filterable="false" />
            <TemplateColumn CellClass="justify-end">
                <CellTemplate>
                    <MudStack Row>
                        <MudButton Size="@Size.Small"
                                   Variant="@Variant.Filled"
                                   Color="@(Reject_switch ? Color.Error : Color.Primary)"
                                   OnClick="@(() => SinglePersonClickedAsync(context.Item))"
                                   Disabled="@singleButtonDisabled">
                            @(Reject_switch ? "Reject" : "Register")
                        </MudButton>
                    </MudStack>
                </CellTemplate>
            </TemplateColumn>
            <PropertyColumn Property="x => x.TroopMemTroopNo" Title="Troop Number" Sortable="false" Filterable="false" />
            <PropertyColumn Property="x => x.TroopMemScoutNumber" Title="Scout Number" Sortable="false" Filterable="false" />
            <TemplateColumn Title="Full Name" Sortable="true">
                <CellTemplate Context="context">
                    <span style="white-space: nowrap">
                        @($"{context.Item.TroopMemFname}{(string.IsNullOrWhiteSpace(context.Item.TroopMemMname) ? "" : $" {context.Item.TroopMemMname[0]}.")} {context.Item.TroopMemLname}")
                    </span>
                </CellTemplate>
            </TemplateColumn>
            <PropertyColumn Property="x => x.TroopMemScoutLevel.TroopMemScoutLevel"
                            Title="Scout Level"
                            Sortable="false"
                            Filterable="false"
                            Grouping="true"
                            Hidden="true"
                            GroupByOrder="@_groupOrder"
                            GroupExpanded="@_groupExpanded"/>
            <PropertyColumn Property="x => x.TroopMemGradeOrYear" Title="Grade or Year" Sortable="false" Filterable="false" />
            <PropertyColumn Property="x => x.TroopMemRegStatus" Title="Registration Status" Sortable="false" Filterable="false" />
            <PropertyColumn Property="x => x.TroopMemBeneficiary" Title="Beneficiary" Sortable="false" Filterable="false" Editable="true" />
            <PropertyColumn Property="x => x.TroopMemBirthdate" Title="Birth Date" Format="MMMM dd, yyyy" Sortable="false" Filterable="false" Editable="true" />
            <PropertyColumn Property="x => x.TroopMemEmail" Title="Email" Editable="true" />
        </Columns>
        <PagerContent>

            <MudDataGridPager T="TroopMember" Style="color: #25a129ff;" />
            <div class="pager-addOn">              
                <MudSwitch @bind-Value="Reject_switch" Label="Reject" LabelPlacement="Placement.Start" Color="Color.Error" />
            </div>
        </PagerContent>

    </MudDataGrid>

</div>
@code {
    [Inject] private ILogger<ScoutRegistrationRequestsPage>? Logger { get; set; }
    private HubConnection? _hubConnection;

    private TroopMember? _selectedPerson;

    private bool multipleButtonDisabled = true;
    private bool singleButtonDisabled = false;
    public bool Reject_switch { get; set; } = false;
    private bool _isRejectMode => Reject_switch;
    private string _searchString = string.Empty;
    private bool isSubmitting = false;

    private int _currentTroopLeaderId;
    private TroopInformation _currentTroopLeader;

    private HashSet<TroopMember> _selectedItems = new();
    private HashSet<int> _selectedIds = new();

    private IEnumerable<TroopMember> FilteredElements => (TroopMemberService.Data ?? Enumerable.Empty<TroopMember>())
        .Where(x => x.ApplicationUser != null && x.ApplicationUser.AccountStatusId == 1 &&
                       x.TroopMemTroopNo == _currentTroopLeader?.TroopNo);

    // Quick Filter function
    private Func<TroopMember, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        return (x.TroopMemFname?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false)
            || (x.TroopMemLname?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false)
            || (x.TroopMemEmail?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false);
    };

    void SelectedItemsChanged(HashSet<TroopMember> selected)
    {
        _selectedItems = selected;
        _selectedIds = selected.Select(x => x.TroopMemId).ToHashSet();

        multipleButtonDisabled = !_selectedItems.Any();
        singleButtonDisabled = _selectedItems.Any();
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var currentUser = await AuthenticatorService.GetCurrentUserAsync();

            if (currentUser != null)
            {
                // Load troop leaders to find the current user's troop leader record
                await TroopLeaderService.LoadDataAsync(q =>
                    q.Include(t => t.ApplicationUser)
                     .Include(t => t.LeaderPosition)
                );

                // Find the troop leader record for this user
                var currentTroopLeader = TroopLeaderService.Data?
                    .FirstOrDefault(t => t.ApplicationUser?.Id == currentUser.Id);

                _currentTroopLeaderId = currentTroopLeader?.LeaderId ?? 0;

                // Load troop information and find the troop this leader manages
                await TroopInformationService.LoadDataAsync();
                _currentTroopLeader = TroopInformationService.Data?
                    .FirstOrDefault(t => t.TroopLeaderId == _currentTroopLeaderId);
            }

            // Load troop members (scouts)
            await TroopMemberService.LoadDataAsync(q =>
                q.Include(t => t.ApplicationUser)
                 .Include(t => t.TroopMemScoutLevel)
            );

            // Rest of your SignalR setup...
            _hubConnection = new HubConnectionBuilder()
                .WithUrl(NavigationManager.ToAbsoluteUri("/autoUpdateHub"))
                .WithAutomaticReconnect()
                .Build();

            _hubConnection.On<string>("ReceiveUpdate", async (tableName) =>
            {
                if (tableName == nameof(TroopMember))
                {
                    await InvokeAsync(async () =>
                    {
                        var currentIds = _selectedItems.Select(x => x.TroopMemId).ToHashSet();
                        await TroopMemberService.LoadDataAsync(q =>
                            q.Include(t => t.ApplicationUser)
                             .Include(t => t.TroopMemScoutLevel)
                        );

                        if (TroopMemberService.Data != null)
                        {
                            _selectedItems = TroopMemberService.Data
                                .Where(x => currentIds.Contains(x.TroopMemId))
                                .ToHashSet();
                        }
                        StateHasChanged();
                    });
                }
            });

            await _hubConnection.StartAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error initializing page: {ex.Message}", Severity.Error);
        }
    }

    // Helper Methods
    private string GetFullName(TroopMember person)
    {
        var middleInitial = string.IsNullOrWhiteSpace(person.TroopMemFname) ? "" : $" {person.TroopMemLname[0]}.";
        return $"{person.TroopMemFname}{middleInitial} {person.TroopMemLname}";
    }

    private async void HandleDataChanged()
    {
        _selectedItems = new HashSet<TroopMember>(
            TroopMemberService.Data.Where(x => _selectedIds.Contains(x.TroopMemId))
        );

        await InvokeAsync(StateHasChanged); // Refresh UI when data changes
    }

    public async void Dispose()
    {
        TroopMemberService.OnChanged -= HandleDataChanged;

        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }


    private async Task RegisterPerson(TroopMember person)
    {
        try
        {
            string Sanitize(string input) => new string(input.Where(char.IsLetterOrDigit).ToArray());

            var first = Sanitize(person.TroopMemFname);
            var last = Sanitize(person.TroopMemLname);
            var year = DateTime.Now.ToString("yy");
            var userNewEmail = $"{first}.{last}-{year}@igsc.com.ph".ToLower();
            var tempPassword = GenerateTemporaryPassword.GenerateTempPassword();

            // Use a fresh scope to avoid all tracking issues
            using (var scope = ServiceProvider.CreateScope())
            {
                var userManager = scope.ServiceProvider.GetRequiredService<UserManager<ApplicationUser>>();
                var dbContext = scope.ServiceProvider.GetRequiredService<ApplicationDbContext>();

                // Get the troop leader with a fresh context
                var troopMember = await dbContext.TroopMembers
                    .Include(t => t.ApplicationUser)
                    .FirstOrDefaultAsync(t => t.TroopMemId == person.TroopMemId);

                if (troopMember?.ApplicationUser != null)
                {
                    // Update user
                    var user = troopMember.ApplicationUser;
                    user.AccountStatusId = 2; // Approved
                    user.MustChangePassword = true;
                    user.PasswordHash = userManager.PasswordHasher.HashPassword(user, tempPassword);

                    var updateResult = await userManager.UpdateAsync(user);
                    if (!updateResult.Succeeded)
                    {
                        Snackbar.Add($"Error updating user: {string.Join(", ", updateResult.Errors.Select(e => e.Description))}", Severity.Error);
                        return;
                    }

                    // Update TroopMember email
                    troopMember.TroopMemRegisteredEmail = userNewEmail;
                    await dbContext.SaveChangesAsync();

                    // Assign role
                    var existingRoles = await userManager.GetRolesAsync(user);
                    if (existingRoles.Any())
                    {
                        await userManager.RemoveFromRolesAsync(user, existingRoles);
                    }

                    await userManager.AddToRoleAsync(user, troopMember.UserRole);

                    await EmailService.SendRegisteredConfirmationEmailAsync(userNewEmail, troopMember.TroopMemEmail, troopMember.TroopMemFname, tempPassword);

                    await TroopMemberService.NotifyChangedAsync();

                    Snackbar.Add($"Success:{troopMember.TroopMemFname} {troopMember.TroopMemLname} was accepted and assigned to respective troop.", Severity.Success);
                }
                else
                {
                    Snackbar.Add($"User not found for {person.TroopMemFname} {person.TroopMemLname}", Severity.Warning);
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error updating account status: {ex.Message}", Severity.Error);
            Console.WriteLine($"Full error: {ex}");
        }
    }

    private async Task RejectPerson(TroopMember person)
    {
        try
        {
            // Make sure to include ApplicationUser when loading TroopMember data
            await TroopMemberService.LoadDataAsync(q =>
                q.Include(t => t.ApplicationUser)
                 .Include(t => t.TroopMemScoutLevel) // Add this line
            );

            // Refresh the person object to get the latest data
            var updatedPerson = TroopMemberService.Data?
                .FirstOrDefault(t => t.TroopMemId == person.TroopMemId);

            if (updatedPerson?.ApplicationUser != null)
            {
                updatedPerson.ApplicationUser.AccountStatusId = 3; // Rejected

                // Update using TroopMemberService - this will handle the user update through EF tracking
                await TroopMemberService.Update(updatedPerson);

                Snackbar.Add($"Success: Request of {person.TroopMemFname} {person.TroopMemLname} was Rejected.", Severity.Success);
            }
            else
            {
                Snackbar.Add($"User not found for {person.TroopMemFname} {person.TroopMemLname}", Severity.Warning);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error updating account status: {ex.Message}", Severity.Error);
        }
    }

    private async Task ShowConfirmationDialog(bool isSingle, bool isReject)
    {

        string message;
        string title;

        if (isSingle && _selectedPerson != null)
        {
            title = isReject ? "Confirm Deletion" : "Confirm Registration";
            message = isReject
                ? $"Are you sure you want to Reject the request of <b>{_selectedPerson.TroopMemFname} {_selectedPerson.TroopMemLname}</b>?"
                : $"Are you sure you want to register <b>{_selectedPerson.TroopMemFname} {_selectedPerson.TroopMemLname}</b> as a <b>{_selectedPerson.UserRole}</b>?";
        }
        else if (!isSingle && _selectedItems.Any())
        {
            title = isReject ? "Confirm Multiple Deletions" : "Confirm Multiple Registrations";
            var names = string.Join("</li><li>", _selectedItems.Select(p => $"{p.TroopMemFname} {p.TroopMemLname}"));
            message = isReject
                ? $"Are you sure you want to Reject these registration requests?<ul><li>{names}</li></ul>"
                : $"Are you sure you want to remove these Troop Leaders?<ul><li>{names}</li></ul>";
        }
        else
        {
            return;
        }

        var parameters = new DialogParameters
        {
            { "Content", message },
            { "IsReject", isReject },
            { "OnConfirmed", EventCallback.Factory.Create(this, async () =>
                {
                    if (isSingle)
                    {
                        if (isReject) await RejectPerson(_selectedPerson);
                        else await RegisterPerson(_selectedPerson);
                    }
                    else
                    {
                        foreach (var person in _selectedItems.ToList())
                        {
                            if (isReject) await RejectPerson(person);
                            else await RegisterPerson(person);
                        }
                    }
                })
            }
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = DialogService.Show<ConfirmationDialog>(title, parameters, options);
        var result = await dialog.Result;

    }


    private async Task SinglePersonClickedAsync(TroopMember person)
    {
        _selectedPerson = person; // Store the selected person
        await ShowConfirmationDialog(isSingle: true, isReject: Reject_switch);
    }

    private string GroupBackgroundColor(GroupDefinition<TroopMember> item)
    {
        switch (item.Grouping.Key?.ToString())
        {
            case "Twinklers":
                return "background: linear-gradient(to right, #f467a4 0%, #f9b8d4 30%, #ffffff 100%); color: #ffffff;"; // Pink gradient

            case "Star":
                return "background: linear-gradient(to right, #f6e03a 0%, #faf0a0 30%, #ffffff 100%); color: #ffffff;"; // Yellow gradient

            case "Junior":
                return "background: linear-gradient(to right, #fdbd23 0%, #fee6a1 30%, #ffffff 100%); color: #ffffff;"; // Orange gradient

            case "Senior":
                return "background: linear-gradient(to right, #ff8546 0%, #ffc5a8 30%, #ffffff 100%); color: #ffffff;"; // Coral gradient

            case "Cadet":
                return "background: linear-gradient(to right, #a821e5 0%, #d9a6f2 30%, #ffffff 100%); color: #ffffff;"; // Purple gradient

            default:
                return "background-color: transparent; color: #000000;"; // fallback
        }
    }

    private bool _groupByPosition = true; // enable grouping on load
    private int _groupOrder = 0;              // group priority
    private bool _groupExpanded = true;       // whether it's expanded initially
}

