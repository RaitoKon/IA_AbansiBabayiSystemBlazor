@using System.Net.Http.Json
@using IA_AbansiBabayiSystemBlazor.Data
@using IA_AbansiBabayiSystemBlazor.Data.Models
@using Microsoft.EntityFrameworkCore
@using IA_AbansiBabayiSystemBlazor.Service
@using Microsoft.AspNetCore.Identity

@inject ApplicationDbContext GetDataFromDB
@inject NavigationManager NavigationManager
@inject TableDataService<TroopMemberRegistration> TroopService
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IJSRuntime JS
@inject UserManager<ApplicationUser> UserManager
@inject EmailService EmailService
@inject RoleManager<IdentityRole> RoleManager
@inject AuthenticationStateProvider AuthenticationStateProvider

@page "/scoutRegistrationRequestsPage"
@layout Layout.ThemedLayout

<MudDialogProvider />
<div class="hero-content">

    <MudDataGrid T="TroopMemberRegistration" MultiSelection="true" RowsPerPage="8" ColumnResizeMode="ResizeMode.Column" Striped="true" Items="@FilteredElements" SortMode="SortMode.Multiple"
    Filterable="true" Groupable="true" QuickFilter="@_quickFilter" Hideable="true" SelectedItems="@GetSelectedItems()" SelectedItemsChanged="SelectedItemsChanged">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Scout Registration Requests</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
            AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <Columns>
            <SelectColumn T="TroopMemberRegistration"/>
            <PropertyColumn Property="x => x.TroopMemId" Title="ID" Sortable="false" Filterable="false" />
            <TemplateColumn CellClass="d-flex justify-end">           
                <CellTemplate>
                    <MudStack Row>
                        <MudButton Size="@Size.Small"
                        Variant="@Variant.Filled"
                        Color="@(delete_switch ? Color.Error : Color.Primary)"
                        OnClick="@(async () => await (delete_switch ? DeleteSinglePersonAsync(context.Item) : SinglePersonClickedAsync(context.Item)))"
                        Disabled="@singleButtonDisabled">
                            @(delete_switch ? "Delete" : "Register")
                        </MudButton>
                    </MudStack>
                </CellTemplate>
            </TemplateColumn>
            <PropertyColumn Property="x => x.TroopMemRole" 
                            Title="Role" 
                            Hidden="true"
                            Grouping="true"
                            GroupByOrder="@_groupOrder"
                            GroupExpanded="@_groupExpanded"/>
            <TemplateColumn Title="Full Name" Sortable="true">
                <CellTemplate Context="context">
                    <span style="white-space: nowrap">
                        @($"{context.Item.TroopMemFname}{(string.IsNullOrWhiteSpace(context.Item.TroopMemMinitial) ? "" : $" {context.Item.TroopMemMinitial[0]}.")} {context.Item.TroopMemLname}")
                    </span>
                </CellTemplate>
            </TemplateColumn>
            <PropertyColumn Property="x => x.TroopMemGradeOrYear" Title="Grade or Year" Filterable="false" />
            <PropertyColumn Property="x => x.TroopMemRegStatus" Title="Registration Status" Filterable="false" />
            <TemplateColumn Title="Birth Date" Sortable="false" Filterable="false">
                <CellTemplate Context="context">
                    @context.Item.TroopMemBirthdate?.ToString("MMMM dd, yyyy")
                </CellTemplate>
            </TemplateColumn>
            <PropertyColumn Property="x => x.TroopMemBeneficiary" Title="Beneficiary" Filterable="false" />
            <PropertyColumn Property="x => x.TroopMemEmail" Title="Email" />
            <PropertyColumn Property="x => x.TroopMemScoutNumber" Title="ScoutNumber" Filterable="false"/>
        </Columns>
        <PagerContent>

            <MudDataGridPager T="TroopMemberRegistration" Style="color: #25a129ff;" />
            <div class="pager-addOn">
                <MudButton Size="@Size.Small"
                Variant="@Variant.Filled"
                Color="@(delete_switch ? Color.Error : Color.Primary)"
                OnClick="@(async () => await (delete_switch ? DeleteMultiplePersonsAsync() : MultiplePersonClickedAsync()))"
                Disabled="@multipleButtonDisabled">
                    @(delete_switch ? "Delete" : "Register")
                </MudButton>
                <MudSwitch @bind-Value="delete_switch" Label="Delete" LabelPlacement="Placement.Start" Color="Color.Error" />
            </div>
        </PagerContent>

    </MudDataGrid>

    <MudMessageBox @ref="_mudMessageBox" Title="@(_isDeleteMode ? "Confirm Deletion" : "Confirm Registration")" CancelText="Cancel">
        <MessageContent>
            @if (_isSinglePersonClicked && _selectedPerson is not null)
            {
                @if (_isDeleteMode)
                {
                    <div>Are you sure you want to delete the request of <b>@_selectedPerson.TroopMemFname @_selectedPerson.TroopMemLname</b>?</div>
                }
                else
                {
                    <div>Are you sure you want to register <b>@_selectedPerson.TroopMemFname @_selectedPerson.TroopMemLname</b> as a Scout?</div>
                }
            }
            else if (_isMultiplePersonsClicked && _selectedItems.Any())
            {
                <div style="margin-bottom: 1rem;">
                    <ul style="margin-left: 1rem;">
                        @foreach (var person in _selectedItems)
                        {
                            <li>@person.TroopMemFname @person.TroopMemLname</li>
                        }
                    </ul>

                    @if (_isDeleteMode)
                    {
                        <div>Are you sure you want to <b>delete</b> the selected registration requests?</div>
                    }
                    else
                    {
                        <div>Are you sure you want to <b>register</b> the selected Troop Leaders?</div>
                    }
                </div>
            }
        </MessageContent>
        <YesButton>
            <MudButton Variant="Variant.Filled"
            Color="@(_isDeleteMode ? Color.Error : Color.Secondary)"
            StartIcon="@(_isDeleteMode ? Icons.Material.Filled.Delete : Icons.Material.Filled.CheckCircle)"
            OnClick="async () => await ConfirmActionAsync()">
                Confirm
            </MudButton>
        </YesButton>
    </MudMessageBox>

</div>
@code {
    private bool _isDeleteMode => delete_switch;

    private string _searchString = string.Empty;

    private IEnumerable<TroopMemberRegistration> FilteredElements =>
    TroopService.Data?.Where(x => x.TroopMemTroopNumber == currentLeaderID) ?? Enumerable.Empty<TroopMemberRegistration>();

    private HashSet<TroopMemberRegistration> _selectedItems = new();

    private HashSet<int> _selectedIds = new();
    private HashSet<TroopMemberRegistration> GetSelectedItems()
    {
        if (TroopService.Data == null) return new();
        return TroopService.Data.Where(x => _selectedIds.Contains(x.TroopMemId)).ToHashSet();
    }

    private bool _isSinglePersonClicked;
    private bool _isMultiplePersonsClicked;
    private MudMessageBox _mudMessageBox;
    private string _state = "Message box hasn't been opened yet";
    private TroopMemberRegistration? _selectedPerson;

    private async Task SinglePersonClickedAsync(TroopMemberRegistration person)
    {
        _selectedPerson = person;
        _isSinglePersonClicked = true;
        _isMultiplePersonsClicked = false;

        bool? result = await _mudMessageBox.ShowAsync();
        _state = result is null
            ? "Canceled"
            : $"Registered {_selectedPerson.TroopMemFname} {_selectedPerson.TroopMemLname}";
        StateHasChanged();
    }

    private bool multipleButtonDisabled = true;
    private bool singleButtonDisabled = false;

    private async Task MultiplePersonClickedAsync()
    {

        if (_selectedItems is null || !_selectedItems.Any())
            return;

        _isSinglePersonClicked = false;
        _isMultiplePersonsClicked = true;

        bool? result = await _mudMessageBox.ShowAsync();
        _state = result is null
            ? "Canceled"
            : $"Registered {string.Join(", ", _selectedItems.Select(p => $"{p.TroopMemFname} {p.TroopMemLname}"))}";
        StateHasChanged();

    }


    private async Task DeleteSinglePersonAsync(TroopMemberRegistration person)
    {
        _selectedPerson = person;
        _isSinglePersonClicked = true;
        _isMultiplePersonsClicked = false;

        bool? result = await _mudMessageBox.ShowAsync();
        _state = result is null
            ? "Canceled"
            : $"{(_isDeleteMode ? "Deleted" : "Registered")} {_selectedPerson.TroopMemFname} {_selectedPerson.TroopMemLname}";

        StateHasChanged();
    }

    private async Task DeleteMultiplePersonsAsync()
    {
        if (_selectedItems is null || !_selectedItems.Any())
            return;

        _isSinglePersonClicked = false;
        _isMultiplePersonsClicked = true;

        bool? result = await _mudMessageBox.ShowAsync();
        _state = result is null
            ? "Canceled"
            : $"{(_isDeleteMode ? "Deleted" : "Registered")} {string.Join(", ", _selectedItems.Select(p => $"{p.TroopMemFname} {p.TroopMemLname}"))}";
        StateHasChanged();
    }

    void SelectedItemsChanged(HashSet<TroopMemberRegistration> selected)
    {
        _selectedItems = selected;
        _selectedIds = selected.Select(i => i.TroopMemId).ToHashSet();
        multipleButtonDisabled = !_selectedItems.Any();
        singleButtonDisabled = _selectedItems.Any();
    }

    // Quick Filter function
    private Func<TroopMemberRegistration, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        return (x.TroopMemFname?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false)
            || (x.TroopMemLname?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false)
            || (x.TroopMemEmail?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false);
    };

    private ApplicationUser currentUser;
    private int currentLeaderID;
    private string troopLeaderFname;
    private bool isLoading = true;
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await TroopService.LoadDataAsync();
        TroopService.OnChanged += HandleDataChanged;

        isLoading = true;

        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity?.IsAuthenticated ?? false)
            {
                var userId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
                currentUser = await UserManager.FindByIdAsync(userId);

                if (currentUser != null)
                {
                    // Fetch troop leader name from related data
                    var account = await GetDataFromDB.RegisteredTroopLeaderAccounts
                        .FirstOrDefaultAsync(a => a.Id == userId);

                    if (account != null)
                    {                         
                        currentLeaderID = account.LeaderId;
                    }
                }
            }
            else
            {
                errorMessage = "User is not authenticated.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Something went wrong: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void HandleDataChanged()
    {
        if (TroopService.Data != null)
        {
            _selectedItems = TroopService.Data
                .Where(x => _selectedIds.Contains(x.TroopMemId))
                .ToHashSet();
        }

        InvokeAsync(StateHasChanged); // Refresh UI when data changes
    }

    public void Dispose()
    {
        // Clean up event subscription to prevent memory leaks
        TroopService.OnChanged -= HandleDataChanged;
    }

    public bool delete_switch { get; set; } = false;

    private async Task RegisterPerson(TroopMemberRegistration person)
    {
        // Step 1: Move to RegisteredTroopMember
        var registeredMember = new RegisteredTroopMember
            {
                TroopMemScoutNumber = person.TroopMemScoutNumber,
                TroopMemFname = person.TroopMemFname,
                TroopMemMinitial = person.TroopMemMinitial,
                TroopMemLname = person.TroopMemLname,
                TroopMemRole = person.TroopMemRole,
                TroopMemRegStatus = person.TroopMemRegStatus,
                TroopMemGradeOrYear = person.TroopMemGradeOrYear,
                TroopMemBirthdate = person.TroopMemBirthdate,
                TroopMemBeneficiary = person.TroopMemBeneficiary,
                TroopMemEmail = person.TroopMemEmail,
                TroopMemTroopNumber = person.TroopMemTroopNumber,
            };

        GetDataFromDB.RegisteredTroopMembers.Add(registeredMember);
        await GetDataFromDB.SaveChangesAsync();

        // Step 2: Create login account
        var newUser = new ApplicationUser
            {
                UserName = person.TroopMemEmail,
                Email = person.TroopMemEmail,
                EmailConfirmed = true,
                MustChangePassword = true
            };

        var tempPassword = GenerateTemporaryPassword.GenerateTempPassword();

        var result = await UserManager.CreateAsync(newUser, tempPassword);

        if (!result.Succeeded)
        {
            foreach (var error in result.Errors)
            {
                Snackbar.Add($"Error: {error.Description}", Severity.Error);
            }
            return;
        }

        await UserManager.AddToRoleAsync(newUser, "Scout");

        // Step 3: Link RegisteredTroopMember to user account
        var accountLink = new TroopMemberAccount
            {
                TroopMemId = registeredMember.TroopMemId,
                Id = newUser.Id
            };

        GetDataFromDB.RegisteredTroopMemberAccounts.Add(accountLink);
        await GetDataFromDB.SaveChangesAsync();

        await EmailService.SendRegisteredConfirmationEmailAsync(person.TroopMemEmail, person.TroopMemFname, person.TroopMemLname, tempPassword);

        // Step 4: Remove from pending registration
        GetDataFromDB.TroopMembers.Remove(person);
        TroopService.Delete(person);
        await GetDataFromDB.SaveChangesAsync();

        Snackbar.Add($"{person.TroopMemFname} {person.TroopMemLname} has been registered and account created!", Severity.Success);
    }

    private async Task DeletePerson(TroopMemberRegistration person)
    {

        var toDelete = await GetDataFromDB.TroopMembers
       .FirstOrDefaultAsync(x => x.TroopMemId == person.TroopMemId);

        if (toDelete is not null)
        {
            GetDataFromDB.TroopMembers.Remove(toDelete);
        }

        TroopService.Delete(person);

        await GetDataFromDB.SaveChangesAsync();

        Snackbar.Add($"{person.TroopMemFname} {person.TroopMemMinitial} {person.TroopMemLname} has been removed successfully!", Severity.Success);
    }

    private async Task ConfirmActionAsync()
    {
        if (_isDeleteMode)
        {
            if (_isSinglePersonClicked && _selectedPerson is not null)
            {
                await DeletePerson(_selectedPerson);
            }
            else if (_isMultiplePersonsClicked && _selectedItems.Any())
            {
                foreach (var person in _selectedItems.ToList())
                {
                    await DeletePerson(person);
                }
            }
        }
        else
        {
            if (_isSinglePersonClicked && _selectedPerson is not null)
            {
                await RegisterPerson(_selectedPerson); // Don't delete again
            }
            else if (_isMultiplePersonsClicked && _selectedItems.Any())
            {
                foreach (var person in _selectedItems.ToList())
                {
                    await RegisterPerson(person); // Don't delete again
                }
            }
        }

        _isSinglePersonClicked = false;
        _isMultiplePersonsClicked = false;
    }

    private bool _groupByPosition = true; // enable grouping on load
    private int _groupOrder = 0;              // group priority
    private bool _groupExpanded = true;       // whether it's expanded initially
}

