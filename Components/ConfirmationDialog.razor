@using MudBlazor

<MudDialog>
    <DialogContent>
        @((MarkupString)Content)
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="() => MudDialog.Cancel()">Cancel</MudButton>
        <MudButton Color="@(IsReject? Color.Error: IsConfirmRoleChange? Color.Warning: Color.Primary)"
                   Variant="Variant.Filled"
                   OnClick="ConfirmActionAsync"
                   Style="width: 7rem;">

            @if (isSubmitting)
            {
                <MudProgressCircular Indeterminate="true"
                                     Size="Size.Small"
                Color="Color.Tertiary" />
            }
            else
            {
                @if (IsConfirmRoleChange == true)
                {
                    <MudIcon Icon="@Icons.Material.Filled.Warning" />
                    @("Confirm")              
                }
                else
                {
                    <MudIcon Icon="@(IsReject? Icons.Material.Filled.Delete : Icons.Material.Filled.CheckCircle)" />
                    @(IsReject ? "Reject" : "Confirm")
                }
            }
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; }

    [Parameter]
    public string Content { get; set; }

    [Parameter]
    public bool IsConfirmRoleChange { get; set; }

    [Parameter]
    public bool IsReject { get; set; }

    [Parameter]
    public EventCallback OnConfirmed { get; set; }

    private bool isSubmitting; // 👈 make this local instead of [Parameter]

    private async Task ConfirmActionAsync()
    {
        isSubmitting = true;
        StateHasChanged(); // ensure spinner shows

        try
        {
            await OnConfirmed.InvokeAsync();
            MudDialog.Close(DialogResult.Ok(true));
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged();
        }
    }
}
